// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: bot_module.proto

package bot_module

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BotModuleService_HandleUpdate_FullMethodName = "/BotModuleService/HandleUpdate"
)

// BotModuleServiceClient is the client API for BotModuleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BotModuleServiceClient interface {
	HandleUpdate(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
}

type botModuleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBotModuleServiceClient(cc grpc.ClientConnInterface) BotModuleServiceClient {
	return &botModuleServiceClient{cc}
}

func (c *botModuleServiceClient) HandleUpdate(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, BotModuleService_HandleUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BotModuleServiceServer is the server API for BotModuleService service.
// All implementations must embed UnimplementedBotModuleServiceServer
// for forward compatibility.
type BotModuleServiceServer interface {
	HandleUpdate(context.Context, *UpdateRequest) (*UpdateResponse, error)
	mustEmbedUnimplementedBotModuleServiceServer()
}

// UnimplementedBotModuleServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBotModuleServiceServer struct{}

func (UnimplementedBotModuleServiceServer) HandleUpdate(context.Context, *UpdateRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleUpdate not implemented")
}
func (UnimplementedBotModuleServiceServer) mustEmbedUnimplementedBotModuleServiceServer() {}
func (UnimplementedBotModuleServiceServer) testEmbeddedByValue()                          {}

// UnsafeBotModuleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BotModuleServiceServer will
// result in compilation errors.
type UnsafeBotModuleServiceServer interface {
	mustEmbedUnimplementedBotModuleServiceServer()
}

func RegisterBotModuleServiceServer(s grpc.ServiceRegistrar, srv BotModuleServiceServer) {
	// If the following call pancis, it indicates UnimplementedBotModuleServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BotModuleService_ServiceDesc, srv)
}

func _BotModuleService_HandleUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotModuleServiceServer).HandleUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BotModuleService_HandleUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotModuleServiceServer).HandleUpdate(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BotModuleService_ServiceDesc is the grpc.ServiceDesc for BotModuleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BotModuleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "BotModuleService",
	HandlerType: (*BotModuleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HandleUpdate",
			Handler:    _BotModuleService_HandleUpdate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bot_module.proto",
}
