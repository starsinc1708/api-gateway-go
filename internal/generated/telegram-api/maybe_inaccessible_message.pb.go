// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: maybe_inaccessible_message.proto

package telegram_api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MaybeInaccessibleMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to MessageType:
	//
	//	*MaybeInaccessibleMessage_Message
	//	*MaybeInaccessibleMessage_InaccessibleMessage
	MessageType   isMaybeInaccessibleMessage_MessageType `protobuf_oneof:"message_type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MaybeInaccessibleMessage) Reset() {
	*x = MaybeInaccessibleMessage{}
	mi := &file_maybe_inaccessible_message_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MaybeInaccessibleMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaybeInaccessibleMessage) ProtoMessage() {}

func (x *MaybeInaccessibleMessage) ProtoReflect() protoreflect.Message {
	mi := &file_maybe_inaccessible_message_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaybeInaccessibleMessage.ProtoReflect.Descriptor instead.
func (*MaybeInaccessibleMessage) Descriptor() ([]byte, []int) {
	return file_maybe_inaccessible_message_proto_rawDescGZIP(), []int{0}
}

func (x *MaybeInaccessibleMessage) GetMessageType() isMaybeInaccessibleMessage_MessageType {
	if x != nil {
		return x.MessageType
	}
	return nil
}

func (x *MaybeInaccessibleMessage) GetMessage() *AccessibleMessage {
	if x != nil {
		if x, ok := x.MessageType.(*MaybeInaccessibleMessage_Message); ok {
			return x.Message
		}
	}
	return nil
}

func (x *MaybeInaccessibleMessage) GetInaccessibleMessage() *InaccessibleMessage {
	if x != nil {
		if x, ok := x.MessageType.(*MaybeInaccessibleMessage_InaccessibleMessage); ok {
			return x.InaccessibleMessage
		}
	}
	return nil
}

type isMaybeInaccessibleMessage_MessageType interface {
	isMaybeInaccessibleMessage_MessageType()
}

type MaybeInaccessibleMessage_Message struct {
	Message *AccessibleMessage `protobuf:"bytes,1,opt,name=message,proto3,oneof"`
}

type MaybeInaccessibleMessage_InaccessibleMessage struct {
	InaccessibleMessage *InaccessibleMessage `protobuf:"bytes,2,opt,name=inaccessible_message,json=inaccessibleMessage,proto3,oneof"`
}

func (*MaybeInaccessibleMessage_Message) isMaybeInaccessibleMessage_MessageType() {}

func (*MaybeInaccessibleMessage_InaccessibleMessage) isMaybeInaccessibleMessage_MessageType() {}

type AccessibleMessage struct {
	state                         protoimpl.MessageState         `protogen:"open.v1"`
	MessageId                     int64                          `protobuf:"zigzag64,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	MessageThreadId               *int64                         `protobuf:"zigzag64,2,opt,name=message_thread_id,json=messageThreadId,proto3,oneof" json:"message_thread_id,omitempty"`
	From                          *User                          `protobuf:"bytes,3,opt,name=from,proto3,oneof" json:"from,omitempty"`
	SenderChat                    *Chat                          `protobuf:"bytes,4,opt,name=sender_chat,json=senderChat,proto3,oneof" json:"sender_chat,omitempty"`
	SenderBoostCount              *int64                         `protobuf:"varint,5,opt,name=sender_boost_count,json=senderBoostCount,proto3,oneof" json:"sender_boost_count,omitempty"`
	SenderBusinessBot             *User                          `protobuf:"bytes,6,opt,name=sender_business_bot,json=senderBusinessBot,proto3,oneof" json:"sender_business_bot,omitempty"`
	Date                          uint32                         `protobuf:"varint,7,opt,name=date,proto3" json:"date,omitempty"`
	BusinessConnectionId          *string                        `protobuf:"bytes,8,opt,name=business_connection_id,json=businessConnectionId,proto3,oneof" json:"business_connection_id,omitempty"`
	Chat                          *Chat                          `protobuf:"bytes,9,opt,name=chat,proto3" json:"chat,omitempty"`
	ForwardOrigin                 *MessageOrigin                 `protobuf:"bytes,10,opt,name=forward_origin,json=forwardOrigin,proto3,oneof" json:"forward_origin,omitempty"`
	IsTopicMessage                *bool                          `protobuf:"varint,11,opt,name=is_topic_message,json=isTopicMessage,proto3,oneof" json:"is_topic_message,omitempty"`
	IsAutomaticForward            *bool                          `protobuf:"varint,12,opt,name=is_automatic_forward,json=isAutomaticForward,proto3,oneof" json:"is_automatic_forward,omitempty"`
	ReplyToMessage                *AccessibleMessage             `protobuf:"bytes,13,opt,name=reply_to_message,json=replyToMessage,proto3,oneof" json:"reply_to_message,omitempty"`
	ExternalReply                 *ExternalReplyInfoInner        `protobuf:"bytes,14,opt,name=external_reply,json=externalReply,proto3,oneof" json:"external_reply,omitempty"`
	Quote                         *TextQuote                     `protobuf:"bytes,15,opt,name=quote,proto3,oneof" json:"quote,omitempty"`
	ReplyToStory                  *Story                         `protobuf:"bytes,16,opt,name=reply_to_story,json=replyToStory,proto3,oneof" json:"reply_to_story,omitempty"`
	ViaBot                        *User                          `protobuf:"bytes,17,opt,name=via_bot,json=viaBot,proto3,oneof" json:"via_bot,omitempty"`
	EditDate                      *uint32                        `protobuf:"varint,18,opt,name=edit_date,json=editDate,proto3,oneof" json:"edit_date,omitempty"`
	HasProtectedContent           *bool                          `protobuf:"varint,19,opt,name=has_protected_content,json=hasProtectedContent,proto3,oneof" json:"has_protected_content,omitempty"`
	IsFromOffline                 *bool                          `protobuf:"varint,20,opt,name=is_from_offline,json=isFromOffline,proto3,oneof" json:"is_from_offline,omitempty"`
	MediaGroupId                  *string                        `protobuf:"bytes,21,opt,name=media_group_id,json=mediaGroupId,proto3,oneof" json:"media_group_id,omitempty"`
	AuthorSignature               *string                        `protobuf:"bytes,22,opt,name=author_signature,json=authorSignature,proto3,oneof" json:"author_signature,omitempty"`
	Text                          *string                        `protobuf:"bytes,23,opt,name=text,proto3,oneof" json:"text,omitempty"`
	Entities                      []*MessageEntity               `protobuf:"bytes,24,rep,name=entities,proto3" json:"entities,omitempty"`
	LinkPreviewOptions            *LinkPreviewOptions            `protobuf:"bytes,25,opt,name=link_preview_options,json=linkPreviewOptions,proto3,oneof" json:"link_preview_options,omitempty"`
	EffectId                      *string                        `protobuf:"bytes,26,opt,name=effect_id,json=effectId,proto3,oneof" json:"effect_id,omitempty"`
	Animation                     *Animation                     `protobuf:"bytes,27,opt,name=animation,proto3,oneof" json:"animation,omitempty"`
	Audio                         *Audio                         `protobuf:"bytes,28,opt,name=audio,proto3,oneof" json:"audio,omitempty"`
	Document                      *Document                      `protobuf:"bytes,29,opt,name=document,proto3,oneof" json:"document,omitempty"`
	PaidMedia                     *PaidMediaInfo                 `protobuf:"bytes,30,opt,name=paid_media,json=paidMedia,proto3,oneof" json:"paid_media,omitempty"`
	Photo                         []*PhotoSize                   `protobuf:"bytes,31,rep,name=photo,proto3" json:"photo,omitempty"`
	Sticker                       *Sticker                       `protobuf:"bytes,32,opt,name=sticker,proto3,oneof" json:"sticker,omitempty"`
	Story                         *Story                         `protobuf:"bytes,33,opt,name=story,proto3,oneof" json:"story,omitempty"`
	Video                         *Video                         `protobuf:"bytes,34,opt,name=video,proto3,oneof" json:"video,omitempty"`
	VideoNote                     *VideoNote                     `protobuf:"bytes,35,opt,name=video_note,json=videoNote,proto3,oneof" json:"video_note,omitempty"`
	Voice                         *Voice                         `protobuf:"bytes,36,opt,name=voice,proto3,oneof" json:"voice,omitempty"`
	Caption                       *string                        `protobuf:"bytes,37,opt,name=caption,proto3,oneof" json:"caption,omitempty"`
	CaptionEntities               []*MessageEntity               `protobuf:"bytes,38,rep,name=caption_entities,json=captionEntities,proto3" json:"caption_entities,omitempty"`
	ShowCaptionAboveMedia         *bool                          `protobuf:"varint,39,opt,name=show_caption_above_media,json=showCaptionAboveMedia,proto3,oneof" json:"show_caption_above_media,omitempty"`
	HasMediaSpoiler               *bool                          `protobuf:"varint,40,opt,name=has_media_spoiler,json=hasMediaSpoiler,proto3,oneof" json:"has_media_spoiler,omitempty"`
	Contact                       *Contact                       `protobuf:"bytes,41,opt,name=contact,proto3,oneof" json:"contact,omitempty"`
	Dice                          *Dice                          `protobuf:"bytes,42,opt,name=dice,proto3,oneof" json:"dice,omitempty"`
	Game                          *Game                          `protobuf:"bytes,43,opt,name=game,proto3,oneof" json:"game,omitempty"`
	Poll                          *Poll                          `protobuf:"bytes,44,opt,name=poll,proto3,oneof" json:"poll,omitempty"`
	Venue                         *Venue                         `protobuf:"bytes,45,opt,name=venue,proto3,oneof" json:"venue,omitempty"`
	Location                      *Location                      `protobuf:"bytes,46,opt,name=location,proto3,oneof" json:"location,omitempty"`
	NewChatMembers                []*User                        `protobuf:"bytes,47,rep,name=new_chat_members,json=newChatMembers,proto3" json:"new_chat_members,omitempty"`
	LeftChatMember                *User                          `protobuf:"bytes,48,opt,name=left_chat_member,json=leftChatMember,proto3,oneof" json:"left_chat_member,omitempty"`
	NewChatTitle                  *string                        `protobuf:"bytes,49,opt,name=new_chat_title,json=newChatTitle,proto3,oneof" json:"new_chat_title,omitempty"`
	NewChatPhoto                  []*PhotoSize                   `protobuf:"bytes,50,rep,name=new_chat_photo,json=newChatPhoto,proto3" json:"new_chat_photo,omitempty"`
	DeleteChatPhoto               *bool                          `protobuf:"varint,51,opt,name=delete_chat_photo,json=deleteChatPhoto,proto3,oneof" json:"delete_chat_photo,omitempty"`
	GroupChatCreated              *bool                          `protobuf:"varint,52,opt,name=group_chat_created,json=groupChatCreated,proto3,oneof" json:"group_chat_created,omitempty"`
	SupergroupChatCreated         *bool                          `protobuf:"varint,53,opt,name=supergroup_chat_created,json=supergroupChatCreated,proto3,oneof" json:"supergroup_chat_created,omitempty"`
	ChannelChatCreated            *bool                          `protobuf:"varint,54,opt,name=channel_chat_created,json=channelChatCreated,proto3,oneof" json:"channel_chat_created,omitempty"`
	MessageAutoDeleteTimerChanged *MessageAutoDeleteTimerChanged `protobuf:"bytes,55,opt,name=message_auto_delete_timer_changed,json=messageAutoDeleteTimerChanged,proto3,oneof" json:"message_auto_delete_timer_changed,omitempty"`
	MigrateToChatId               *int64                         `protobuf:"zigzag64,56,opt,name=migrate_to_chat_id,json=migrateToChatId,proto3,oneof" json:"migrate_to_chat_id,omitempty"`
	MigrateFromChatId             *int64                         `protobuf:"zigzag64,57,opt,name=migrate_from_chat_id,json=migrateFromChatId,proto3,oneof" json:"migrate_from_chat_id,omitempty"`
	PinnedMessage                 *MaybeInaccessibleMessage      `protobuf:"bytes,58,opt,name=pinned_message,json=pinnedMessage,proto3,oneof" json:"pinned_message,omitempty"`
	Invoice                       *Invoice                       `protobuf:"bytes,59,opt,name=invoice,proto3,oneof" json:"invoice,omitempty"`
	SuccessfulPayment             *SuccessfulPayment             `protobuf:"bytes,60,opt,name=successful_payment,json=successfulPayment,proto3,oneof" json:"successful_payment,omitempty"`
	RefundedPayment               *RefundedPayment               `protobuf:"bytes,61,opt,name=refunded_payment,json=refundedPayment,proto3,oneof" json:"refunded_payment,omitempty"`
	UsersShared                   *UsersShared                   `protobuf:"bytes,62,opt,name=users_shared,json=usersShared,proto3,oneof" json:"users_shared,omitempty"`
	ChatShared                    *ChatShared                    `protobuf:"bytes,63,opt,name=chat_shared,json=chatShared,proto3,oneof" json:"chat_shared,omitempty"`
	ConnectedWebsite              *string                        `protobuf:"bytes,64,opt,name=connected_website,json=connectedWebsite,proto3,oneof" json:"connected_website,omitempty"`
	WriteAccessAllowed            *WriteAccessAllowed            `protobuf:"bytes,65,opt,name=write_access_allowed,json=writeAccessAllowed,proto3,oneof" json:"write_access_allowed,omitempty"`
	PassportData                  *PassportData                  `protobuf:"bytes,66,opt,name=passport_data,json=passportData,proto3,oneof" json:"passport_data,omitempty"`
	ProximityAlertTriggered       *ProximityAlertTriggered       `protobuf:"bytes,67,opt,name=proximity_alert_triggered,json=proximityAlertTriggered,proto3,oneof" json:"proximity_alert_triggered,omitempty"`
	BoostAdded                    *ChatBoostAdded                `protobuf:"bytes,68,opt,name=boost_added,json=boostAdded,proto3,oneof" json:"boost_added,omitempty"`
	ChatBackgroundSet             *ChatBackground                `protobuf:"bytes,69,opt,name=chat_background_set,json=chatBackgroundSet,proto3,oneof" json:"chat_background_set,omitempty"`
	ForumTopicCreated             *ForumTopicCreated             `protobuf:"bytes,70,opt,name=forum_topic_created,json=forumTopicCreated,proto3,oneof" json:"forum_topic_created,omitempty"`
	ForumTopicEdited              *ForumTopicEdited              `protobuf:"bytes,71,opt,name=forum_topic_edited,json=forumTopicEdited,proto3,oneof" json:"forum_topic_edited,omitempty"`
	ForumTopicClosed              *ForumTopicClosed              `protobuf:"bytes,72,opt,name=forum_topic_closed,json=forumTopicClosed,proto3,oneof" json:"forum_topic_closed,omitempty"`
	ForumTopicReopened            *ForumTopicReopened            `protobuf:"bytes,73,opt,name=forum_topic_reopened,json=forumTopicReopened,proto3,oneof" json:"forum_topic_reopened,omitempty"`
	GeneralForumTopicHidden       *GeneralForumTopicHidden       `protobuf:"bytes,74,opt,name=general_forum_topic_hidden,json=generalForumTopicHidden,proto3,oneof" json:"general_forum_topic_hidden,omitempty"`
	GeneralForumTopicUnhidden     *GeneralForumTopicUnhidden     `protobuf:"bytes,75,opt,name=general_forum_topic_unhidden,json=generalForumTopicUnhidden,proto3,oneof" json:"general_forum_topic_unhidden,omitempty"`
	GiveawayCreated               *GiveawayCreated               `protobuf:"bytes,76,opt,name=giveaway_created,json=giveawayCreated,proto3,oneof" json:"giveaway_created,omitempty"`
	Giveaway                      *Giveaway                      `protobuf:"bytes,77,opt,name=giveaway,proto3,oneof" json:"giveaway,omitempty"`
	GiveawayWinners               *GiveawayWinners               `protobuf:"bytes,78,opt,name=giveaway_winners,json=giveawayWinners,proto3,oneof" json:"giveaway_winners,omitempty"`
	GiveawayCompleted             *GiveawayCompleted             `protobuf:"bytes,79,opt,name=giveaway_completed,json=giveawayCompleted,proto3,oneof" json:"giveaway_completed,omitempty"`
	VideoChatScheduled            *VideoChatScheduled            `protobuf:"bytes,80,opt,name=video_chat_scheduled,json=videoChatScheduled,proto3,oneof" json:"video_chat_scheduled,omitempty"`
	VideoChatStarted              *VideoChatStarted              `protobuf:"bytes,81,opt,name=video_chat_started,json=videoChatStarted,proto3,oneof" json:"video_chat_started,omitempty"`
	VideoChatEnded                *VideoChatEnded                `protobuf:"bytes,82,opt,name=video_chat_ended,json=videoChatEnded,proto3,oneof" json:"video_chat_ended,omitempty"`
	VideoChatParticipantsInvited  *VideoChatParticipantsInvited  `protobuf:"bytes,83,opt,name=video_chat_participants_invited,json=videoChatParticipantsInvited,proto3,oneof" json:"video_chat_participants_invited,omitempty"`
	WebAppData                    *WebAppData                    `protobuf:"bytes,84,opt,name=web_app_data,json=webAppData,proto3,oneof" json:"web_app_data,omitempty"`
	ReplyMarkup                   *InlineKeyboardMarkup          `protobuf:"bytes,85,opt,name=reply_markup,json=replyMarkup,proto3,oneof" json:"reply_markup,omitempty"`
	unknownFields                 protoimpl.UnknownFields
	sizeCache                     protoimpl.SizeCache
}

func (x *AccessibleMessage) Reset() {
	*x = AccessibleMessage{}
	mi := &file_maybe_inaccessible_message_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessibleMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessibleMessage) ProtoMessage() {}

func (x *AccessibleMessage) ProtoReflect() protoreflect.Message {
	mi := &file_maybe_inaccessible_message_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessibleMessage.ProtoReflect.Descriptor instead.
func (*AccessibleMessage) Descriptor() ([]byte, []int) {
	return file_maybe_inaccessible_message_proto_rawDescGZIP(), []int{1}
}

func (x *AccessibleMessage) GetMessageId() int64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *AccessibleMessage) GetMessageThreadId() int64 {
	if x != nil && x.MessageThreadId != nil {
		return *x.MessageThreadId
	}
	return 0
}

func (x *AccessibleMessage) GetFrom() *User {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *AccessibleMessage) GetSenderChat() *Chat {
	if x != nil {
		return x.SenderChat
	}
	return nil
}

func (x *AccessibleMessage) GetSenderBoostCount() int64 {
	if x != nil && x.SenderBoostCount != nil {
		return *x.SenderBoostCount
	}
	return 0
}

func (x *AccessibleMessage) GetSenderBusinessBot() *User {
	if x != nil {
		return x.SenderBusinessBot
	}
	return nil
}

func (x *AccessibleMessage) GetDate() uint32 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *AccessibleMessage) GetBusinessConnectionId() string {
	if x != nil && x.BusinessConnectionId != nil {
		return *x.BusinessConnectionId
	}
	return ""
}

func (x *AccessibleMessage) GetChat() *Chat {
	if x != nil {
		return x.Chat
	}
	return nil
}

func (x *AccessibleMessage) GetForwardOrigin() *MessageOrigin {
	if x != nil {
		return x.ForwardOrigin
	}
	return nil
}

func (x *AccessibleMessage) GetIsTopicMessage() bool {
	if x != nil && x.IsTopicMessage != nil {
		return *x.IsTopicMessage
	}
	return false
}

func (x *AccessibleMessage) GetIsAutomaticForward() bool {
	if x != nil && x.IsAutomaticForward != nil {
		return *x.IsAutomaticForward
	}
	return false
}

func (x *AccessibleMessage) GetReplyToMessage() *AccessibleMessage {
	if x != nil {
		return x.ReplyToMessage
	}
	return nil
}

func (x *AccessibleMessage) GetExternalReply() *ExternalReplyInfoInner {
	if x != nil {
		return x.ExternalReply
	}
	return nil
}

func (x *AccessibleMessage) GetQuote() *TextQuote {
	if x != nil {
		return x.Quote
	}
	return nil
}

func (x *AccessibleMessage) GetReplyToStory() *Story {
	if x != nil {
		return x.ReplyToStory
	}
	return nil
}

func (x *AccessibleMessage) GetViaBot() *User {
	if x != nil {
		return x.ViaBot
	}
	return nil
}

func (x *AccessibleMessage) GetEditDate() uint32 {
	if x != nil && x.EditDate != nil {
		return *x.EditDate
	}
	return 0
}

func (x *AccessibleMessage) GetHasProtectedContent() bool {
	if x != nil && x.HasProtectedContent != nil {
		return *x.HasProtectedContent
	}
	return false
}

func (x *AccessibleMessage) GetIsFromOffline() bool {
	if x != nil && x.IsFromOffline != nil {
		return *x.IsFromOffline
	}
	return false
}

func (x *AccessibleMessage) GetMediaGroupId() string {
	if x != nil && x.MediaGroupId != nil {
		return *x.MediaGroupId
	}
	return ""
}

func (x *AccessibleMessage) GetAuthorSignature() string {
	if x != nil && x.AuthorSignature != nil {
		return *x.AuthorSignature
	}
	return ""
}

func (x *AccessibleMessage) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *AccessibleMessage) GetEntities() []*MessageEntity {
	if x != nil {
		return x.Entities
	}
	return nil
}

func (x *AccessibleMessage) GetLinkPreviewOptions() *LinkPreviewOptions {
	if x != nil {
		return x.LinkPreviewOptions
	}
	return nil
}

func (x *AccessibleMessage) GetEffectId() string {
	if x != nil && x.EffectId != nil {
		return *x.EffectId
	}
	return ""
}

func (x *AccessibleMessage) GetAnimation() *Animation {
	if x != nil {
		return x.Animation
	}
	return nil
}

func (x *AccessibleMessage) GetAudio() *Audio {
	if x != nil {
		return x.Audio
	}
	return nil
}

func (x *AccessibleMessage) GetDocument() *Document {
	if x != nil {
		return x.Document
	}
	return nil
}

func (x *AccessibleMessage) GetPaidMedia() *PaidMediaInfo {
	if x != nil {
		return x.PaidMedia
	}
	return nil
}

func (x *AccessibleMessage) GetPhoto() []*PhotoSize {
	if x != nil {
		return x.Photo
	}
	return nil
}

func (x *AccessibleMessage) GetSticker() *Sticker {
	if x != nil {
		return x.Sticker
	}
	return nil
}

func (x *AccessibleMessage) GetStory() *Story {
	if x != nil {
		return x.Story
	}
	return nil
}

func (x *AccessibleMessage) GetVideo() *Video {
	if x != nil {
		return x.Video
	}
	return nil
}

func (x *AccessibleMessage) GetVideoNote() *VideoNote {
	if x != nil {
		return x.VideoNote
	}
	return nil
}

func (x *AccessibleMessage) GetVoice() *Voice {
	if x != nil {
		return x.Voice
	}
	return nil
}

func (x *AccessibleMessage) GetCaption() string {
	if x != nil && x.Caption != nil {
		return *x.Caption
	}
	return ""
}

func (x *AccessibleMessage) GetCaptionEntities() []*MessageEntity {
	if x != nil {
		return x.CaptionEntities
	}
	return nil
}

func (x *AccessibleMessage) GetShowCaptionAboveMedia() bool {
	if x != nil && x.ShowCaptionAboveMedia != nil {
		return *x.ShowCaptionAboveMedia
	}
	return false
}

func (x *AccessibleMessage) GetHasMediaSpoiler() bool {
	if x != nil && x.HasMediaSpoiler != nil {
		return *x.HasMediaSpoiler
	}
	return false
}

func (x *AccessibleMessage) GetContact() *Contact {
	if x != nil {
		return x.Contact
	}
	return nil
}

func (x *AccessibleMessage) GetDice() *Dice {
	if x != nil {
		return x.Dice
	}
	return nil
}

func (x *AccessibleMessage) GetGame() *Game {
	if x != nil {
		return x.Game
	}
	return nil
}

func (x *AccessibleMessage) GetPoll() *Poll {
	if x != nil {
		return x.Poll
	}
	return nil
}

func (x *AccessibleMessage) GetVenue() *Venue {
	if x != nil {
		return x.Venue
	}
	return nil
}

func (x *AccessibleMessage) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *AccessibleMessage) GetNewChatMembers() []*User {
	if x != nil {
		return x.NewChatMembers
	}
	return nil
}

func (x *AccessibleMessage) GetLeftChatMember() *User {
	if x != nil {
		return x.LeftChatMember
	}
	return nil
}

func (x *AccessibleMessage) GetNewChatTitle() string {
	if x != nil && x.NewChatTitle != nil {
		return *x.NewChatTitle
	}
	return ""
}

func (x *AccessibleMessage) GetNewChatPhoto() []*PhotoSize {
	if x != nil {
		return x.NewChatPhoto
	}
	return nil
}

func (x *AccessibleMessage) GetDeleteChatPhoto() bool {
	if x != nil && x.DeleteChatPhoto != nil {
		return *x.DeleteChatPhoto
	}
	return false
}

func (x *AccessibleMessage) GetGroupChatCreated() bool {
	if x != nil && x.GroupChatCreated != nil {
		return *x.GroupChatCreated
	}
	return false
}

func (x *AccessibleMessage) GetSupergroupChatCreated() bool {
	if x != nil && x.SupergroupChatCreated != nil {
		return *x.SupergroupChatCreated
	}
	return false
}

func (x *AccessibleMessage) GetChannelChatCreated() bool {
	if x != nil && x.ChannelChatCreated != nil {
		return *x.ChannelChatCreated
	}
	return false
}

func (x *AccessibleMessage) GetMessageAutoDeleteTimerChanged() *MessageAutoDeleteTimerChanged {
	if x != nil {
		return x.MessageAutoDeleteTimerChanged
	}
	return nil
}

func (x *AccessibleMessage) GetMigrateToChatId() int64 {
	if x != nil && x.MigrateToChatId != nil {
		return *x.MigrateToChatId
	}
	return 0
}

func (x *AccessibleMessage) GetMigrateFromChatId() int64 {
	if x != nil && x.MigrateFromChatId != nil {
		return *x.MigrateFromChatId
	}
	return 0
}

func (x *AccessibleMessage) GetPinnedMessage() *MaybeInaccessibleMessage {
	if x != nil {
		return x.PinnedMessage
	}
	return nil
}

func (x *AccessibleMessage) GetInvoice() *Invoice {
	if x != nil {
		return x.Invoice
	}
	return nil
}

func (x *AccessibleMessage) GetSuccessfulPayment() *SuccessfulPayment {
	if x != nil {
		return x.SuccessfulPayment
	}
	return nil
}

func (x *AccessibleMessage) GetRefundedPayment() *RefundedPayment {
	if x != nil {
		return x.RefundedPayment
	}
	return nil
}

func (x *AccessibleMessage) GetUsersShared() *UsersShared {
	if x != nil {
		return x.UsersShared
	}
	return nil
}

func (x *AccessibleMessage) GetChatShared() *ChatShared {
	if x != nil {
		return x.ChatShared
	}
	return nil
}

func (x *AccessibleMessage) GetConnectedWebsite() string {
	if x != nil && x.ConnectedWebsite != nil {
		return *x.ConnectedWebsite
	}
	return ""
}

func (x *AccessibleMessage) GetWriteAccessAllowed() *WriteAccessAllowed {
	if x != nil {
		return x.WriteAccessAllowed
	}
	return nil
}

func (x *AccessibleMessage) GetPassportData() *PassportData {
	if x != nil {
		return x.PassportData
	}
	return nil
}

func (x *AccessibleMessage) GetProximityAlertTriggered() *ProximityAlertTriggered {
	if x != nil {
		return x.ProximityAlertTriggered
	}
	return nil
}

func (x *AccessibleMessage) GetBoostAdded() *ChatBoostAdded {
	if x != nil {
		return x.BoostAdded
	}
	return nil
}

func (x *AccessibleMessage) GetChatBackgroundSet() *ChatBackground {
	if x != nil {
		return x.ChatBackgroundSet
	}
	return nil
}

func (x *AccessibleMessage) GetForumTopicCreated() *ForumTopicCreated {
	if x != nil {
		return x.ForumTopicCreated
	}
	return nil
}

func (x *AccessibleMessage) GetForumTopicEdited() *ForumTopicEdited {
	if x != nil {
		return x.ForumTopicEdited
	}
	return nil
}

func (x *AccessibleMessage) GetForumTopicClosed() *ForumTopicClosed {
	if x != nil {
		return x.ForumTopicClosed
	}
	return nil
}

func (x *AccessibleMessage) GetForumTopicReopened() *ForumTopicReopened {
	if x != nil {
		return x.ForumTopicReopened
	}
	return nil
}

func (x *AccessibleMessage) GetGeneralForumTopicHidden() *GeneralForumTopicHidden {
	if x != nil {
		return x.GeneralForumTopicHidden
	}
	return nil
}

func (x *AccessibleMessage) GetGeneralForumTopicUnhidden() *GeneralForumTopicUnhidden {
	if x != nil {
		return x.GeneralForumTopicUnhidden
	}
	return nil
}

func (x *AccessibleMessage) GetGiveawayCreated() *GiveawayCreated {
	if x != nil {
		return x.GiveawayCreated
	}
	return nil
}

func (x *AccessibleMessage) GetGiveaway() *Giveaway {
	if x != nil {
		return x.Giveaway
	}
	return nil
}

func (x *AccessibleMessage) GetGiveawayWinners() *GiveawayWinners {
	if x != nil {
		return x.GiveawayWinners
	}
	return nil
}

func (x *AccessibleMessage) GetGiveawayCompleted() *GiveawayCompleted {
	if x != nil {
		return x.GiveawayCompleted
	}
	return nil
}

func (x *AccessibleMessage) GetVideoChatScheduled() *VideoChatScheduled {
	if x != nil {
		return x.VideoChatScheduled
	}
	return nil
}

func (x *AccessibleMessage) GetVideoChatStarted() *VideoChatStarted {
	if x != nil {
		return x.VideoChatStarted
	}
	return nil
}

func (x *AccessibleMessage) GetVideoChatEnded() *VideoChatEnded {
	if x != nil {
		return x.VideoChatEnded
	}
	return nil
}

func (x *AccessibleMessage) GetVideoChatParticipantsInvited() *VideoChatParticipantsInvited {
	if x != nil {
		return x.VideoChatParticipantsInvited
	}
	return nil
}

func (x *AccessibleMessage) GetWebAppData() *WebAppData {
	if x != nil {
		return x.WebAppData
	}
	return nil
}

func (x *AccessibleMessage) GetReplyMarkup() *InlineKeyboardMarkup {
	if x != nil {
		return x.ReplyMarkup
	}
	return nil
}

type ExternalReplyInfoInner struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Origin             *MessageOrigin         `protobuf:"bytes,1,opt,name=origin,proto3" json:"origin,omitempty"`
	Chat               *Chat                  `protobuf:"bytes,2,opt,name=chat,proto3,oneof" json:"chat,omitempty"`
	MessageId          *int64                 `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3,oneof" json:"message_id,omitempty"`
	LinkPreviewOptions *LinkPreviewOptions    `protobuf:"bytes,4,opt,name=link_preview_options,json=linkPreviewOptions,proto3,oneof" json:"link_preview_options,omitempty"`
	Animation          *Animation             `protobuf:"bytes,5,opt,name=animation,proto3,oneof" json:"animation,omitempty"`
	Audio              *Audio                 `protobuf:"bytes,6,opt,name=audio,proto3,oneof" json:"audio,omitempty"`
	Document           *Document              `protobuf:"bytes,7,opt,name=document,proto3,oneof" json:"document,omitempty"`
	PaidMedia          *PaidMediaInfo         `protobuf:"bytes,8,opt,name=paid_media,json=paidMedia,proto3,oneof" json:"paid_media,omitempty"`
	Photo              []*PhotoSize           `protobuf:"bytes,9,rep,name=photo,proto3" json:"photo,omitempty"`
	Sticker            *Sticker               `protobuf:"bytes,10,opt,name=sticker,proto3,oneof" json:"sticker,omitempty"`
	Story              *Story                 `protobuf:"bytes,11,opt,name=story,proto3,oneof" json:"story,omitempty"`
	Video              *Video                 `protobuf:"bytes,12,opt,name=video,proto3,oneof" json:"video,omitempty"`
	VideoNote          *VideoNote             `protobuf:"bytes,13,opt,name=video_note,json=videoNote,proto3,oneof" json:"video_note,omitempty"`
	Voice              *Voice                 `protobuf:"bytes,14,opt,name=voice,proto3,oneof" json:"voice,omitempty"`
	HasMediaSpoiler    *bool                  `protobuf:"varint,15,opt,name=has_media_spoiler,json=hasMediaSpoiler,proto3,oneof" json:"has_media_spoiler,omitempty"`
	Contact            *Contact               `protobuf:"bytes,16,opt,name=contact,proto3,oneof" json:"contact,omitempty"`
	Dice               *Dice                  `protobuf:"bytes,17,opt,name=dice,proto3,oneof" json:"dice,omitempty"`
	Game               *Game                  `protobuf:"bytes,18,opt,name=game,proto3,oneof" json:"game,omitempty"`
	Giveaway           *Giveaway              `protobuf:"bytes,19,opt,name=giveaway,proto3,oneof" json:"giveaway,omitempty"`
	GiveawayWinners    *GiveawayWinners       `protobuf:"bytes,20,opt,name=giveaway_winners,json=giveawayWinners,proto3,oneof" json:"giveaway_winners,omitempty"`
	Invoice            *Invoice               `protobuf:"bytes,21,opt,name=invoice,proto3,oneof" json:"invoice,omitempty"`
	Location           *Location              `protobuf:"bytes,22,opt,name=location,proto3,oneof" json:"location,omitempty"`
	Poll               *Poll                  `protobuf:"bytes,23,opt,name=poll,proto3,oneof" json:"poll,omitempty"`
	Venue              *Venue                 `protobuf:"bytes,24,opt,name=venue,proto3,oneof" json:"venue,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ExternalReplyInfoInner) Reset() {
	*x = ExternalReplyInfoInner{}
	mi := &file_maybe_inaccessible_message_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExternalReplyInfoInner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalReplyInfoInner) ProtoMessage() {}

func (x *ExternalReplyInfoInner) ProtoReflect() protoreflect.Message {
	mi := &file_maybe_inaccessible_message_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalReplyInfoInner.ProtoReflect.Descriptor instead.
func (*ExternalReplyInfoInner) Descriptor() ([]byte, []int) {
	return file_maybe_inaccessible_message_proto_rawDescGZIP(), []int{2}
}

func (x *ExternalReplyInfoInner) GetOrigin() *MessageOrigin {
	if x != nil {
		return x.Origin
	}
	return nil
}

func (x *ExternalReplyInfoInner) GetChat() *Chat {
	if x != nil {
		return x.Chat
	}
	return nil
}

func (x *ExternalReplyInfoInner) GetMessageId() int64 {
	if x != nil && x.MessageId != nil {
		return *x.MessageId
	}
	return 0
}

func (x *ExternalReplyInfoInner) GetLinkPreviewOptions() *LinkPreviewOptions {
	if x != nil {
		return x.LinkPreviewOptions
	}
	return nil
}

func (x *ExternalReplyInfoInner) GetAnimation() *Animation {
	if x != nil {
		return x.Animation
	}
	return nil
}

func (x *ExternalReplyInfoInner) GetAudio() *Audio {
	if x != nil {
		return x.Audio
	}
	return nil
}

func (x *ExternalReplyInfoInner) GetDocument() *Document {
	if x != nil {
		return x.Document
	}
	return nil
}

func (x *ExternalReplyInfoInner) GetPaidMedia() *PaidMediaInfo {
	if x != nil {
		return x.PaidMedia
	}
	return nil
}

func (x *ExternalReplyInfoInner) GetPhoto() []*PhotoSize {
	if x != nil {
		return x.Photo
	}
	return nil
}

func (x *ExternalReplyInfoInner) GetSticker() *Sticker {
	if x != nil {
		return x.Sticker
	}
	return nil
}

func (x *ExternalReplyInfoInner) GetStory() *Story {
	if x != nil {
		return x.Story
	}
	return nil
}

func (x *ExternalReplyInfoInner) GetVideo() *Video {
	if x != nil {
		return x.Video
	}
	return nil
}

func (x *ExternalReplyInfoInner) GetVideoNote() *VideoNote {
	if x != nil {
		return x.VideoNote
	}
	return nil
}

func (x *ExternalReplyInfoInner) GetVoice() *Voice {
	if x != nil {
		return x.Voice
	}
	return nil
}

func (x *ExternalReplyInfoInner) GetHasMediaSpoiler() bool {
	if x != nil && x.HasMediaSpoiler != nil {
		return *x.HasMediaSpoiler
	}
	return false
}

func (x *ExternalReplyInfoInner) GetContact() *Contact {
	if x != nil {
		return x.Contact
	}
	return nil
}

func (x *ExternalReplyInfoInner) GetDice() *Dice {
	if x != nil {
		return x.Dice
	}
	return nil
}

func (x *ExternalReplyInfoInner) GetGame() *Game {
	if x != nil {
		return x.Game
	}
	return nil
}

func (x *ExternalReplyInfoInner) GetGiveaway() *Giveaway {
	if x != nil {
		return x.Giveaway
	}
	return nil
}

func (x *ExternalReplyInfoInner) GetGiveawayWinners() *GiveawayWinners {
	if x != nil {
		return x.GiveawayWinners
	}
	return nil
}

func (x *ExternalReplyInfoInner) GetInvoice() *Invoice {
	if x != nil {
		return x.Invoice
	}
	return nil
}

func (x *ExternalReplyInfoInner) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *ExternalReplyInfoInner) GetPoll() *Poll {
	if x != nil {
		return x.Poll
	}
	return nil
}

func (x *ExternalReplyInfoInner) GetVenue() *Venue {
	if x != nil {
		return x.Venue
	}
	return nil
}

type InaccessibleMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Chat          *Chat                  `protobuf:"bytes,1,opt,name=chat,proto3" json:"chat,omitempty"`
	MessageId     int64                  `protobuf:"varint,2,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	Date          uint32                 `protobuf:"varint,3,opt,name=date,proto3" json:"date,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InaccessibleMessage) Reset() {
	*x = InaccessibleMessage{}
	mi := &file_maybe_inaccessible_message_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InaccessibleMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InaccessibleMessage) ProtoMessage() {}

func (x *InaccessibleMessage) ProtoReflect() protoreflect.Message {
	mi := &file_maybe_inaccessible_message_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InaccessibleMessage.ProtoReflect.Descriptor instead.
func (*InaccessibleMessage) Descriptor() ([]byte, []int) {
	return file_maybe_inaccessible_message_proto_rawDescGZIP(), []int{3}
}

func (x *InaccessibleMessage) GetChat() *Chat {
	if x != nil {
		return x.Chat
	}
	return nil
}

func (x *InaccessibleMessage) GetMessageId() int64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *InaccessibleMessage) GetDate() uint32 {
	if x != nil {
		return x.Date
	}
	return 0
}

var File_maybe_inaccessible_message_proto protoreflect.FileDescriptor

var file_maybe_inaccessible_message_proto_rawDesc = string([]byte{
	0x0a, 0x20, 0x6d, 0x61, 0x79, 0x62, 0x65, 0x5f, 0x69, 0x6e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x69, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0a, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x10, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1a, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x0b, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0b, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x0a, 0x70, 0x6f, 0x6c, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x67, 0x61, 0x6d,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x64, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x27, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x6f,
	0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x11, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13,
	0x70, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x6d, 0x69, 0x74, 0x79, 0x5f, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x62, 0x6f, 0x6f, 0x73, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x62, 0x61, 0x63,
	0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x66,
	0x6f, 0x72, 0x75, 0x6d, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x0e, 0x67, 0x69, 0x76, 0x65, 0x61, 0x77, 0x61, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x18, 0x67, 0x69, 0x76, 0x65, 0x61, 0x77, 0x61, 0x79, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x77, 0x65, 0x62, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15,
	0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa9, 0x01, 0x0a, 0x1a, 0x6d, 0x61, 0x79, 0x62,
	0x65, 0x5f, 0x69, 0x6e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x69, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4a, 0x0a, 0x14, 0x69, 0x6e, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69, 0x6e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x69, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x13,
	0x69, 0x6e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x22, 0xff, 0x2f, 0x0a, 0x12, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62,
	0x6c, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x12, 0x52, 0x09,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x11, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x12, 0x48, 0x00, 0x52, 0x0f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x04, 0x66, 0x72,
	0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x48,
	0x01, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0b, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x05, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x48, 0x02, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x43, 0x68, 0x61, 0x74, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x73, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x5f, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x03, 0x52, 0x10, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x6f, 0x6f,
	0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x13, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x6f,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x48, 0x04,
	0x52, 0x11, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x42, 0x6f, 0x74, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x16, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x14, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x04, 0x63, 0x68, 0x61, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x52, 0x04, 0x63, 0x68, 0x61, 0x74,
	0x12, 0x3b, 0x0a, 0x0e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x48, 0x06, 0x52, 0x0d, 0x66, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a,
	0x10, 0x69, 0x73, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x48, 0x07, 0x52, 0x0e, 0x69, 0x73, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14,
	0x69, 0x73, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x66, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x48, 0x08, 0x52, 0x12, 0x69, 0x73,
	0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x10, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x74, 0x6f, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x48, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x0e, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x48, 0x0a, 0x52, 0x0d, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x88, 0x01, 0x01, 0x12,
	0x26, 0x0a, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x48, 0x0b, 0x52, 0x05, 0x71,
	0x75, 0x6f, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x6c, 0x79,
	0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x06, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x48, 0x0c, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x79,
	0x54, 0x6f, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x07, 0x76, 0x69,
	0x61, 0x5f, 0x62, 0x6f, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x48, 0x0d, 0x52, 0x06, 0x76, 0x69, 0x61, 0x42, 0x6f, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x20, 0x0a, 0x09, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x0e, 0x52, 0x08, 0x65, 0x64, 0x69, 0x74, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x37, 0x0a, 0x15, 0x68, 0x61, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x0f, 0x52, 0x13, 0x68, 0x61, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x69, 0x73,
	0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x10, 0x52, 0x0d, 0x69, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x4f, 0x66, 0x66,
	0x6c, 0x69, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x11, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x12, 0x52, 0x0f,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x13, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x08, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x14, 0x6c, 0x69, 0x6e, 0x6b,
	0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x70, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x14, 0x52,
	0x12, 0x6c, 0x69, 0x6e, 0x6b, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x15, 0x52, 0x08, 0x65, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x09, 0x61, 0x6e, 0x69, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x61, 0x6e,
	0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x16, 0x52, 0x09, 0x61, 0x6e, 0x69, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x48, 0x17,
	0x52, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x08, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x18, 0x52, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x0a, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x61, 0x69,
	0x64, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x19, 0x52, 0x09,
	0x70, 0x61, 0x69, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x05,
	0x70, 0x68, 0x6f, 0x74, 0x6f, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x68,
	0x6f, 0x74, 0x6f, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x12,
	0x27, 0x0a, 0x07, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x08, 0x2e, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x48, 0x1a, 0x52, 0x07, 0x73, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x48,
	0x1b, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x05, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x48, 0x1c, 0x52, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2f,
	0x0a, 0x0a, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x23, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x48,
	0x1d, 0x52, 0x09, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x4e, 0x6f, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x21, 0x0a, 0x05, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06,
	0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x48, 0x1e, 0x52, 0x05, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x25, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x1f, 0x52, 0x07, 0x63, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x3a, 0x0a, 0x10, 0x63, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x26, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0f, 0x63, 0x61,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x3c, 0x0a,
	0x18, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x63, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x62,
	0x6f, 0x76, 0x65, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x27, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x20, 0x52, 0x15, 0x73, 0x68, 0x6f, 0x77, 0x43, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x62,
	0x6f, 0x76, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x68,
	0x61, 0x73, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x73, 0x70, 0x6f, 0x69, 0x6c, 0x65, 0x72,
	0x18, 0x28, 0x20, 0x01, 0x28, 0x08, 0x48, 0x21, 0x52, 0x0f, 0x68, 0x61, 0x73, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x53, 0x70, 0x6f, 0x69, 0x6c, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x48, 0x22, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x04, 0x64, 0x69, 0x63, 0x65, 0x18, 0x2a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x64, 0x69, 0x63, 0x65, 0x48, 0x23, 0x52, 0x04, 0x64, 0x69,
	0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x04, 0x67, 0x61, 0x6d, 0x65, 0x18, 0x2b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x48, 0x24, 0x52, 0x04, 0x67, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x04, 0x70, 0x6f, 0x6c, 0x6c, 0x18, 0x2c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x70, 0x6f, 0x6c, 0x6c, 0x48, 0x25, 0x52, 0x04, 0x70, 0x6f,
	0x6c, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x05, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x18, 0x2d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x48, 0x26, 0x52, 0x05,
	0x76, 0x65, 0x6e, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x27, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x61, 0x74,
	0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x2f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x05,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x52, 0x0e, 0x6e, 0x65, 0x77, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x34, 0x0a, 0x10, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x63, 0x68,
	0x61, 0x74, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x05, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x48, 0x28, 0x52, 0x0e, 0x6c, 0x65, 0x66, 0x74, 0x43, 0x68,
	0x61, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x6e,
	0x65, 0x77, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x31, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x29, 0x52, 0x0c, 0x6e, 0x65, 0x77, 0x43, 0x68, 0x61, 0x74, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x0e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68,
	0x61, 0x74, 0x5f, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x18, 0x32, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x52, 0x0c, 0x6e, 0x65, 0x77,
	0x43, 0x68, 0x61, 0x74, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x2f, 0x0a, 0x11, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x18, 0x33,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x2a, 0x52, 0x0f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68,
	0x61, 0x74, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x34, 0x20, 0x01, 0x28, 0x08, 0x48, 0x2b, 0x52, 0x10, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43,
	0x68, 0x61, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a,
	0x17, 0x73, 0x75, 0x70, 0x65, 0x72, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x63, 0x68, 0x61, 0x74,
	0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x35, 0x20, 0x01, 0x28, 0x08, 0x48, 0x2c,
	0x52, 0x15, 0x73, 0x75, 0x70, 0x65, 0x72, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x68, 0x61, 0x74,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x36, 0x20, 0x01, 0x28, 0x08, 0x48, 0x2d, 0x52, 0x12, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x43, 0x68, 0x61, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x71, 0x0a, 0x21, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x75, 0x74,
	0x6f, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64,
	0x48, 0x2e, 0x52, 0x1d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x12, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x6f, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x38, 0x20, 0x01, 0x28, 0x12,
	0x48, 0x2f, 0x52, 0x0f, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x43, 0x68, 0x61,
	0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x14, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74,
	0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x39,
	0x20, 0x01, 0x28, 0x12, 0x48, 0x30, 0x52, 0x11, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x46,
	0x72, 0x6f, 0x6d, 0x43, 0x68, 0x61, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x0e,
	0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x3a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x61, 0x79, 0x62, 0x65, 0x5f, 0x69, 0x6e, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x48, 0x31, 0x52, 0x0d, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x07, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x18, 0x3b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x48, 0x32, 0x52, 0x07, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x47,
	0x0a, 0x12, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x5f, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x48,
	0x33, 0x52, 0x11, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x10, 0x72, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x3d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x48, 0x34, 0x52, 0x0f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x65, 0x64,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x0c, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x48,
	0x35, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x73, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x32, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x18, 0x3f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x48, 0x36, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x74, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x5f, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x18, 0x40, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x37, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x57, 0x65, 0x62,
	0x73, 0x69, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4c, 0x0a, 0x14, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18,
	0x41, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x48, 0x38, 0x52, 0x12,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x0d, 0x70, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x42, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70,
	0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x48, 0x39, 0x52, 0x0c,
	0x70, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12,
	0x5b, 0x0a, 0x19, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x6d, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x18, 0x43, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x6d, 0x69, 0x74, 0x79, 0x5f, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x48, 0x3a,
	0x52, 0x17, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x6d, 0x69, 0x74, 0x79, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x0b,
	0x62, 0x6f, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x65, 0x64, 0x18, 0x44, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x5f, 0x61,
	0x64, 0x64, 0x65, 0x64, 0x48, 0x3b, 0x52, 0x0a, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x41, 0x64, 0x64,
	0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x13, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x62, 0x61,
	0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x45, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x48, 0x3c, 0x52, 0x11, 0x63, 0x68, 0x61, 0x74, 0x42, 0x61, 0x63, 0x6b,
	0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x49, 0x0a, 0x13,
	0x66, 0x6f, 0x72, 0x75, 0x6d, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66, 0x6f, 0x72, 0x75,
	0x6d, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x48,
	0x3d, 0x52, 0x11, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x12, 0x66, 0x6f, 0x72, 0x75, 0x6d,
	0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x65, 0x64, 0x18, 0x47, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x5f, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x65, 0x64, 0x48, 0x3e, 0x52, 0x10, 0x66, 0x6f, 0x72, 0x75,
	0x6d, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x45, 0x64, 0x69, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x46, 0x0a, 0x12, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x64, 0x18, 0x48, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x6f,
	0x72, 0x75, 0x6d, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64,
	0x48, 0x3f, 0x52, 0x10, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x4c, 0x0a, 0x14, 0x66, 0x6f, 0x72, 0x75, 0x6d,
	0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x6f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x18,
	0x49, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x5f, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x6f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x48, 0x40, 0x52, 0x12,
	0x66, 0x6f, 0x72, 0x75, 0x6d, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x6f, 0x70, 0x65, 0x6e,
	0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x5d, 0x0a, 0x1a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c,
	0x5f, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x68, 0x69, 0x64,
	0x64, 0x65, 0x6e, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x6c, 0x5f, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f,
	0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x48, 0x41, 0x52, 0x17, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x6c, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x48, 0x69, 0x64, 0x64, 0x65,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x63, 0x0a, 0x1c, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f,
	0x66, 0x6f, 0x72, 0x75, 0x6d, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x75, 0x6e, 0x68, 0x69,
	0x64, 0x64, 0x65, 0x6e, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x6c, 0x5f, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63,
	0x5f, 0x75, 0x6e, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x48, 0x42, 0x52, 0x19, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x6c, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x55, 0x6e,
	0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x10, 0x67, 0x69, 0x76,
	0x65, 0x61, 0x77, 0x61, 0x79, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x4c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x69, 0x76, 0x65, 0x61, 0x77, 0x61, 0x79, 0x5f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x48, 0x43, 0x52, 0x0f, 0x67, 0x69, 0x76, 0x65, 0x61, 0x77,
	0x61, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x08,
	0x67, 0x69, 0x76, 0x65, 0x61, 0x77, 0x61, 0x79, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09,
	0x2e, 0x67, 0x69, 0x76, 0x65, 0x61, 0x77, 0x61, 0x79, 0x48, 0x44, 0x52, 0x08, 0x67, 0x69, 0x76,
	0x65, 0x61, 0x77, 0x61, 0x79, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x10, 0x67, 0x69, 0x76, 0x65,
	0x61, 0x77, 0x61, 0x79, 0x5f, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x4e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x69, 0x76, 0x65, 0x61, 0x77, 0x61, 0x79, 0x5f, 0x77, 0x69,
	0x6e, 0x6e, 0x65, 0x72, 0x73, 0x48, 0x45, 0x52, 0x0f, 0x67, 0x69, 0x76, 0x65, 0x61, 0x77, 0x61,
	0x79, 0x57, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x12, 0x67,
	0x69, 0x76, 0x65, 0x61, 0x77, 0x61, 0x79, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x67, 0x69, 0x76, 0x65, 0x61, 0x77,
	0x61, 0x79, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x48, 0x46, 0x52, 0x11,
	0x67, 0x69, 0x76, 0x65, 0x61, 0x77, 0x61, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x4c, 0x0a, 0x14, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x63, 0x68,
	0x61, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x18, 0x50, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x48, 0x47, 0x52, 0x12, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x43, 0x68, 0x61, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x46, 0x0a, 0x12, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x63, 0x68, 0x61, 0x74,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x51, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x65, 0x64, 0x48, 0x48, 0x52, 0x10, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x68, 0x61, 0x74,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x10, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x52,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x63, 0x68, 0x61,
	0x74, 0x5f, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x48, 0x49, 0x52, 0x0e, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x43, 0x68, 0x61, 0x74, 0x45, 0x6e, 0x64, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x6c, 0x0a, 0x1f,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x18,
	0x53, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x63, 0x68,
	0x61, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x5f,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x48, 0x4a, 0x52, 0x1c, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x43, 0x68, 0x61, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x0c, 0x77, 0x65,
	0x62, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x54, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x48,
	0x4b, 0x52, 0x0a, 0x77, 0x65, 0x62, 0x41, 0x70, 0x70, 0x44, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01,
	0x12, 0x3f, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x70,
	0x18, 0x55, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x6b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x48,
	0x4c, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x4d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x88, 0x01,
	0x01, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x66, 0x72, 0x6f, 0x6d,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x74,
	0x42, 0x15, 0x0a, 0x13, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x6f, 0x73,
	0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x73, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x6f, 0x74, 0x42,
	0x19, 0x0a, 0x17, 0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x66,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x42, 0x13, 0x0a,
	0x11, 0x5f, 0x69, 0x73, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x69, 0x73, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x69, 0x63, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f,
	0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65,
	0x70, 0x6c, 0x79, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x76, 0x69, 0x61, 0x5f, 0x62, 0x6f, 0x74, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x68,
	0x61, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x69, 0x73, 0x5f, 0x66, 0x72, 0x6f, 0x6d,
	0x5f, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x6c, 0x69,
	0x6e, 0x6b, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x6e,
	0x6f, 0x74, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x63, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x73, 0x68,
	0x6f, 0x77, 0x5f, 0x63, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x62, 0x6f, 0x76, 0x65,
	0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x68, 0x61, 0x73, 0x5f, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x5f, 0x73, 0x70, 0x6f, 0x69, 0x6c, 0x65, 0x72, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x64, 0x69, 0x63,
	0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70,
	0x6f, 0x6c, 0x6c, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6c,
	0x65, 0x66, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x63, 0x68,
	0x61, 0x74, 0x5f, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x1a, 0x0a, 0x18, 0x5f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x63,
	0x68, 0x61, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x17, 0x0a, 0x15, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x24, 0x0a, 0x22, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6d,
	0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69,
	0x64, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x72,
	0x6f, 0x6d, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x70,
	0x69, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x5f,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x5f, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x42, 0x17, 0x0a, 0x15,
	0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x70, 0x72, 0x6f, 0x78,
	0x69, 0x6d, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x74, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x65, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x5f,
	0x61, 0x64, 0x64, 0x65, 0x64, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x62,
	0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x65, 0x74, 0x42, 0x16, 0x0a,
	0x14, 0x5f, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x5f,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x65, 0x64, 0x42, 0x15, 0x0a, 0x13,
	0x5f, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x64, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x5f, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x6f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x42, 0x1d, 0x0a, 0x1b,
	0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x5f, 0x74,
	0x6f, 0x70, 0x69, 0x63, 0x5f, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x42, 0x1f, 0x0a, 0x1d, 0x5f,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x5f, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x5f, 0x75, 0x6e, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x42, 0x13, 0x0a, 0x11,
	0x5f, 0x67, 0x69, 0x76, 0x65, 0x61, 0x77, 0x61, 0x79, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x69, 0x76, 0x65, 0x61, 0x77, 0x61, 0x79, 0x42, 0x13,
	0x0a, 0x11, 0x5f, 0x67, 0x69, 0x76, 0x65, 0x61, 0x77, 0x61, 0x79, 0x5f, 0x77, 0x69, 0x6e, 0x6e,
	0x65, 0x72, 0x73, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x67, 0x69, 0x76, 0x65, 0x61, 0x77, 0x61, 0x79,
	0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x64, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x63, 0x68,
	0x61, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x42,
	0x22, 0x0a, 0x20, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x6d,
	0x61, 0x72, 0x6b, 0x75, 0x70, 0x22, 0xb1, 0x0a, 0x0a, 0x19, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x69, 0x6e,
	0x6e, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x04,
	0x63, 0x68, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x63, 0x68, 0x61,
	0x74, 0x48, 0x00, 0x52, 0x04, 0x63, 0x68, 0x61, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x01, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x4c, 0x0a, 0x14, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x02, 0x52, 0x12, 0x6c, 0x69, 0x6e, 0x6b, 0x50, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2d,
	0x0a, 0x09, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x03, 0x52,
	0x09, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a,
	0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x61,
	0x75, 0x64, 0x69, 0x6f, 0x48, 0x04, 0x52, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x2a, 0x0a, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x09, 0x2e, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x05, 0x52,
	0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x0a,
	0x70, 0x61, 0x69, 0x64, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x48, 0x06, 0x52, 0x09, 0x70, 0x61, 0x69, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x88,
	0x01, 0x01, 0x12, 0x21, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x52, 0x05,
	0x70, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x27, 0x0a, 0x07, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x48, 0x07, 0x52, 0x07, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x21,
	0x0a, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x48, 0x08, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x88, 0x01,
	0x01, 0x12, 0x21, 0x0a, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x06, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x48, 0x09, 0x52, 0x05, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x0a, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x6e, 0x6f,
	0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x48, 0x0a, 0x52, 0x09, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x4e, 0x6f,
	0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x05, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x48, 0x0b, 0x52, 0x05,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x68, 0x61, 0x73, 0x5f,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x73, 0x70, 0x6f, 0x69, 0x6c, 0x65, 0x72, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x0c, 0x52, 0x0f, 0x68, 0x61, 0x73, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x53,
	0x70, 0x6f, 0x69, 0x6c, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x48, 0x0d, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x1e, 0x0a, 0x04, 0x64, 0x69, 0x63, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x05, 0x2e, 0x64, 0x69, 0x63, 0x65, 0x48, 0x0e, 0x52, 0x04, 0x64, 0x69, 0x63, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x1e, 0x0a, 0x04, 0x67, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x05, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x48, 0x0f, 0x52, 0x04, 0x67, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x2a, 0x0a, 0x08, 0x67, 0x69, 0x76, 0x65, 0x61, 0x77, 0x61, 0x79, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x67, 0x69, 0x76, 0x65, 0x61, 0x77, 0x61, 0x79, 0x48,
	0x10, 0x52, 0x08, 0x67, 0x69, 0x76, 0x65, 0x61, 0x77, 0x61, 0x79, 0x88, 0x01, 0x01, 0x12, 0x41,
	0x0a, 0x10, 0x67, 0x69, 0x76, 0x65, 0x61, 0x77, 0x61, 0x79, 0x5f, 0x77, 0x69, 0x6e, 0x6e, 0x65,
	0x72, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x69, 0x76, 0x65, 0x61,
	0x77, 0x61, 0x79, 0x5f, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x48, 0x11, 0x52, 0x0f, 0x67,
	0x69, 0x76, 0x65, 0x61, 0x77, 0x61, 0x79, 0x57, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x27, 0x0a, 0x07, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x08, 0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x48, 0x12, 0x52, 0x07,
	0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x13, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x04, 0x70, 0x6f, 0x6c, 0x6c, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x70, 0x6f, 0x6c, 0x6c, 0x48, 0x14, 0x52, 0x04, 0x70,
	0x6f, 0x6c, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x05, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x48, 0x15, 0x52,
	0x05, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x63, 0x68,
	0x61, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69,
	0x64, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x61,
	0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x61, 0x75, 0x64,
	0x69, 0x6f, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x68, 0x61, 0x73, 0x5f,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x73, 0x70, 0x6f, 0x69, 0x6c, 0x65, 0x72, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x64, 0x69,
	0x63, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x67, 0x69, 0x76, 0x65, 0x61, 0x77, 0x61, 0x79, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x67, 0x69, 0x76,
	0x65, 0x61, 0x77, 0x61, 0x79, 0x5f, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70, 0x6f, 0x6c, 0x6c, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x22, 0x64, 0x0a, 0x14, 0x69, 0x6e, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x19, 0x0a, 0x04, 0x63, 0x68, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x05, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x52, 0x04, 0x63, 0x68, 0x61, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x42,
	0x18, 0x5a, 0x16, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2f, 0x74, 0x65, 0x6c,
	0x65, 0x67, 0x72, 0x61, 0x6d, 0x2d, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
})

var (
	file_maybe_inaccessible_message_proto_rawDescOnce sync.Once
	file_maybe_inaccessible_message_proto_rawDescData []byte
)

func file_maybe_inaccessible_message_proto_rawDescGZIP() []byte {
	file_maybe_inaccessible_message_proto_rawDescOnce.Do(func() {
		file_maybe_inaccessible_message_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_maybe_inaccessible_message_proto_rawDesc), len(file_maybe_inaccessible_message_proto_rawDesc)))
	})
	return file_maybe_inaccessible_message_proto_rawDescData
}

var file_maybe_inaccessible_message_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_maybe_inaccessible_message_proto_goTypes = []any{
	(*MaybeInaccessibleMessage)(nil),      // 0: maybe_inaccessible_message
	(*AccessibleMessage)(nil),             // 1: accessible_message
	(*ExternalReplyInfoInner)(nil),        // 2: external_reply_info_inner
	(*InaccessibleMessage)(nil),           // 3: inaccessible_message
	(*User)(nil),                          // 4: user
	(*Chat)(nil),                          // 5: chat
	(*MessageOrigin)(nil),                 // 6: message_origin
	(*TextQuote)(nil),                     // 7: text_quote
	(*Story)(nil),                         // 8: story
	(*MessageEntity)(nil),                 // 9: message_entity
	(*LinkPreviewOptions)(nil),            // 10: link_preview_options
	(*Animation)(nil),                     // 11: animation
	(*Audio)(nil),                         // 12: audio
	(*Document)(nil),                      // 13: document
	(*PaidMediaInfo)(nil),                 // 14: paid_media_info
	(*PhotoSize)(nil),                     // 15: photo_size
	(*Sticker)(nil),                       // 16: sticker
	(*Video)(nil),                         // 17: video
	(*VideoNote)(nil),                     // 18: video_note
	(*Voice)(nil),                         // 19: voice
	(*Contact)(nil),                       // 20: contact
	(*Dice)(nil),                          // 21: dice
	(*Game)(nil),                          // 22: game
	(*Poll)(nil),                          // 23: poll
	(*Venue)(nil),                         // 24: venue
	(*Location)(nil),                      // 25: location
	(*MessageAutoDeleteTimerChanged)(nil), // 26: message_auto_delete_timer_changed
	(*Invoice)(nil),                       // 27: invoice
	(*SuccessfulPayment)(nil),             // 28: successful_payment
	(*RefundedPayment)(nil),               // 29: refunded_payment
	(*UsersShared)(nil),                   // 30: users_shared
	(*ChatShared)(nil),                    // 31: chat_shared
	(*WriteAccessAllowed)(nil),            // 32: write_access_allowed
	(*PassportData)(nil),                  // 33: passport_data
	(*ProximityAlertTriggered)(nil),       // 34: proximity_alert_triggered
	(*ChatBoostAdded)(nil),                // 35: chat_boost_added
	(*ChatBackground)(nil),                // 36: chat_background
	(*ForumTopicCreated)(nil),             // 37: forum_topic_created
	(*ForumTopicEdited)(nil),              // 38: forum_topic_edited
	(*ForumTopicClosed)(nil),              // 39: forum_topic_closed
	(*ForumTopicReopened)(nil),            // 40: forum_topic_reopened
	(*GeneralForumTopicHidden)(nil),       // 41: general_forum_topic_hidden
	(*GeneralForumTopicUnhidden)(nil),     // 42: general_forum_topic_unhidden
	(*GiveawayCreated)(nil),               // 43: giveaway_created
	(*Giveaway)(nil),                      // 44: giveaway
	(*GiveawayWinners)(nil),               // 45: giveaway_winners
	(*GiveawayCompleted)(nil),             // 46: giveaway_completed
	(*VideoChatScheduled)(nil),            // 47: video_chat_scheduled
	(*VideoChatStarted)(nil),              // 48: video_chat_started
	(*VideoChatEnded)(nil),                // 49: video_chat_ended
	(*VideoChatParticipantsInvited)(nil),  // 50: video_chat_participants_invited
	(*WebAppData)(nil),                    // 51: web_app_data
	(*InlineKeyboardMarkup)(nil),          // 52: inline_keyboard_markup
}
var file_maybe_inaccessible_message_proto_depIdxs = []int32{
	1,  // 0: maybe_inaccessible_message.message:type_name -> accessible_message
	3,  // 1: maybe_inaccessible_message.inaccessible_message:type_name -> inaccessible_message
	4,  // 2: accessible_message.from:type_name -> user
	5,  // 3: accessible_message.sender_chat:type_name -> chat
	4,  // 4: accessible_message.sender_business_bot:type_name -> user
	5,  // 5: accessible_message.chat:type_name -> chat
	6,  // 6: accessible_message.forward_origin:type_name -> message_origin
	1,  // 7: accessible_message.reply_to_message:type_name -> accessible_message
	2,  // 8: accessible_message.external_reply:type_name -> external_reply_info_inner
	7,  // 9: accessible_message.quote:type_name -> text_quote
	8,  // 10: accessible_message.reply_to_story:type_name -> story
	4,  // 11: accessible_message.via_bot:type_name -> user
	9,  // 12: accessible_message.entities:type_name -> message_entity
	10, // 13: accessible_message.link_preview_options:type_name -> link_preview_options
	11, // 14: accessible_message.animation:type_name -> animation
	12, // 15: accessible_message.audio:type_name -> audio
	13, // 16: accessible_message.document:type_name -> document
	14, // 17: accessible_message.paid_media:type_name -> paid_media_info
	15, // 18: accessible_message.photo:type_name -> photo_size
	16, // 19: accessible_message.sticker:type_name -> sticker
	8,  // 20: accessible_message.story:type_name -> story
	17, // 21: accessible_message.video:type_name -> video
	18, // 22: accessible_message.video_note:type_name -> video_note
	19, // 23: accessible_message.voice:type_name -> voice
	9,  // 24: accessible_message.caption_entities:type_name -> message_entity
	20, // 25: accessible_message.contact:type_name -> contact
	21, // 26: accessible_message.dice:type_name -> dice
	22, // 27: accessible_message.game:type_name -> game
	23, // 28: accessible_message.poll:type_name -> poll
	24, // 29: accessible_message.venue:type_name -> venue
	25, // 30: accessible_message.location:type_name -> location
	4,  // 31: accessible_message.new_chat_members:type_name -> user
	4,  // 32: accessible_message.left_chat_member:type_name -> user
	15, // 33: accessible_message.new_chat_photo:type_name -> photo_size
	26, // 34: accessible_message.message_auto_delete_timer_changed:type_name -> message_auto_delete_timer_changed
	0,  // 35: accessible_message.pinned_message:type_name -> maybe_inaccessible_message
	27, // 36: accessible_message.invoice:type_name -> invoice
	28, // 37: accessible_message.successful_payment:type_name -> successful_payment
	29, // 38: accessible_message.refunded_payment:type_name -> refunded_payment
	30, // 39: accessible_message.users_shared:type_name -> users_shared
	31, // 40: accessible_message.chat_shared:type_name -> chat_shared
	32, // 41: accessible_message.write_access_allowed:type_name -> write_access_allowed
	33, // 42: accessible_message.passport_data:type_name -> passport_data
	34, // 43: accessible_message.proximity_alert_triggered:type_name -> proximity_alert_triggered
	35, // 44: accessible_message.boost_added:type_name -> chat_boost_added
	36, // 45: accessible_message.chat_background_set:type_name -> chat_background
	37, // 46: accessible_message.forum_topic_created:type_name -> forum_topic_created
	38, // 47: accessible_message.forum_topic_edited:type_name -> forum_topic_edited
	39, // 48: accessible_message.forum_topic_closed:type_name -> forum_topic_closed
	40, // 49: accessible_message.forum_topic_reopened:type_name -> forum_topic_reopened
	41, // 50: accessible_message.general_forum_topic_hidden:type_name -> general_forum_topic_hidden
	42, // 51: accessible_message.general_forum_topic_unhidden:type_name -> general_forum_topic_unhidden
	43, // 52: accessible_message.giveaway_created:type_name -> giveaway_created
	44, // 53: accessible_message.giveaway:type_name -> giveaway
	45, // 54: accessible_message.giveaway_winners:type_name -> giveaway_winners
	46, // 55: accessible_message.giveaway_completed:type_name -> giveaway_completed
	47, // 56: accessible_message.video_chat_scheduled:type_name -> video_chat_scheduled
	48, // 57: accessible_message.video_chat_started:type_name -> video_chat_started
	49, // 58: accessible_message.video_chat_ended:type_name -> video_chat_ended
	50, // 59: accessible_message.video_chat_participants_invited:type_name -> video_chat_participants_invited
	51, // 60: accessible_message.web_app_data:type_name -> web_app_data
	52, // 61: accessible_message.reply_markup:type_name -> inline_keyboard_markup
	6,  // 62: external_reply_info_inner.origin:type_name -> message_origin
	5,  // 63: external_reply_info_inner.chat:type_name -> chat
	10, // 64: external_reply_info_inner.link_preview_options:type_name -> link_preview_options
	11, // 65: external_reply_info_inner.animation:type_name -> animation
	12, // 66: external_reply_info_inner.audio:type_name -> audio
	13, // 67: external_reply_info_inner.document:type_name -> document
	14, // 68: external_reply_info_inner.paid_media:type_name -> paid_media_info
	15, // 69: external_reply_info_inner.photo:type_name -> photo_size
	16, // 70: external_reply_info_inner.sticker:type_name -> sticker
	8,  // 71: external_reply_info_inner.story:type_name -> story
	17, // 72: external_reply_info_inner.video:type_name -> video
	18, // 73: external_reply_info_inner.video_note:type_name -> video_note
	19, // 74: external_reply_info_inner.voice:type_name -> voice
	20, // 75: external_reply_info_inner.contact:type_name -> contact
	21, // 76: external_reply_info_inner.dice:type_name -> dice
	22, // 77: external_reply_info_inner.game:type_name -> game
	44, // 78: external_reply_info_inner.giveaway:type_name -> giveaway
	45, // 79: external_reply_info_inner.giveaway_winners:type_name -> giveaway_winners
	27, // 80: external_reply_info_inner.invoice:type_name -> invoice
	25, // 81: external_reply_info_inner.location:type_name -> location
	23, // 82: external_reply_info_inner.poll:type_name -> poll
	24, // 83: external_reply_info_inner.venue:type_name -> venue
	5,  // 84: inaccessible_message.chat:type_name -> chat
	85, // [85:85] is the sub-list for method output_type
	85, // [85:85] is the sub-list for method input_type
	85, // [85:85] is the sub-list for extension type_name
	85, // [85:85] is the sub-list for extension extendee
	0,  // [0:85] is the sub-list for field type_name
}

func init() { file_maybe_inaccessible_message_proto_init() }
func file_maybe_inaccessible_message_proto_init() {
	if File_maybe_inaccessible_message_proto != nil {
		return
	}
	file_chat_proto_init()
	file_user_proto_init()
	file_message_origin_proto_init()
	file_text_quote_proto_init()
	file_story_proto_init()
	file_link_preview_options_proto_init()
	file_message_entity_proto_init()
	file_media_proto_init()
	file_payment_info_proto_init()
	file_location_proto_init()
	file_venue_proto_init()
	file_poll_proto_init()
	file_game_proto_init()
	file_dice_proto_init()
	file_contact_proto_init()
	file_message_auto_delete_timer_changed_proto_init()
	file_users_shared_proto_init()
	file_chat_shared_proto_init()
	file_write_access_allowed_proto_init()
	file_passport_data_proto_init()
	file_proximity_alert_triggered_proto_init()
	file_chat_boost_proto_init()
	file_chat_background_proto_init()
	file_forum_topic_proto_init()
	file_giveaway_proto_init()
	file_giveaway_completed_proto_init()
	file_web_app_data_proto_init()
	file_inline_keyboard_proto_init()
	file_video_chat_proto_init()
	file_maybe_inaccessible_message_proto_msgTypes[0].OneofWrappers = []any{
		(*MaybeInaccessibleMessage_Message)(nil),
		(*MaybeInaccessibleMessage_InaccessibleMessage)(nil),
	}
	file_maybe_inaccessible_message_proto_msgTypes[1].OneofWrappers = []any{}
	file_maybe_inaccessible_message_proto_msgTypes[2].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_maybe_inaccessible_message_proto_rawDesc), len(file_maybe_inaccessible_message_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_maybe_inaccessible_message_proto_goTypes,
		DependencyIndexes: file_maybe_inaccessible_message_proto_depIdxs,
		MessageInfos:      file_maybe_inaccessible_message_proto_msgTypes,
	}.Build()
	File_maybe_inaccessible_message_proto = out.File
	file_maybe_inaccessible_message_proto_goTypes = nil
	file_maybe_inaccessible_message_proto_depIdxs = nil
}
