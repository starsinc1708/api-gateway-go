// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: chat_member.proto

package telegram_api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ChatMemberUpdated struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	Chat                    *Chat                  `protobuf:"bytes,1,opt,name=chat,proto3" json:"chat,omitempty"`
	From                    *User                  `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	Date                    int32                  `protobuf:"varint,3,opt,name=date,proto3" json:"date,omitempty"`
	OldChatMember           *ChatMember            `protobuf:"bytes,4,opt,name=old_chat_member,json=oldChatMember,proto3" json:"old_chat_member,omitempty"`
	NewChatMember           *ChatMember            `protobuf:"bytes,5,opt,name=new_chat_member,json=newChatMember,proto3" json:"new_chat_member,omitempty"`
	InviteLink              *ChatInviteLink        `protobuf:"bytes,6,opt,name=invite_link,json=inviteLink,proto3,oneof" json:"invite_link,omitempty"`
	ViaJoinRequest          *bool                  `protobuf:"varint,7,opt,name=via_join_request,json=viaJoinRequest,proto3,oneof" json:"via_join_request,omitempty"`
	ViaChatFolderInviteLink *bool                  `protobuf:"varint,8,opt,name=via_chat_folder_invite_link,json=viaChatFolderInviteLink,proto3,oneof" json:"via_chat_folder_invite_link,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *ChatMemberUpdated) Reset() {
	*x = ChatMemberUpdated{}
	mi := &file_chat_member_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatMemberUpdated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatMemberUpdated) ProtoMessage() {}

func (x *ChatMemberUpdated) ProtoReflect() protoreflect.Message {
	mi := &file_chat_member_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatMemberUpdated.ProtoReflect.Descriptor instead.
func (*ChatMemberUpdated) Descriptor() ([]byte, []int) {
	return file_chat_member_proto_rawDescGZIP(), []int{0}
}

func (x *ChatMemberUpdated) GetChat() *Chat {
	if x != nil {
		return x.Chat
	}
	return nil
}

func (x *ChatMemberUpdated) GetFrom() *User {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *ChatMemberUpdated) GetDate() int32 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *ChatMemberUpdated) GetOldChatMember() *ChatMember {
	if x != nil {
		return x.OldChatMember
	}
	return nil
}

func (x *ChatMemberUpdated) GetNewChatMember() *ChatMember {
	if x != nil {
		return x.NewChatMember
	}
	return nil
}

func (x *ChatMemberUpdated) GetInviteLink() *ChatInviteLink {
	if x != nil {
		return x.InviteLink
	}
	return nil
}

func (x *ChatMemberUpdated) GetViaJoinRequest() bool {
	if x != nil && x.ViaJoinRequest != nil {
		return *x.ViaJoinRequest
	}
	return false
}

func (x *ChatMemberUpdated) GetViaChatFolderInviteLink() bool {
	if x != nil && x.ViaChatFolderInviteLink != nil {
		return *x.ViaChatFolderInviteLink
	}
	return false
}

type ChatMember struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*ChatMember_Owner
	//	*ChatMember_Administrator
	//	*ChatMember_Member
	//	*ChatMember_Restricted
	//	*ChatMember_Left
	//	*ChatMember_Banned
	Type          isChatMember_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChatMember) Reset() {
	*x = ChatMember{}
	mi := &file_chat_member_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatMember) ProtoMessage() {}

func (x *ChatMember) ProtoReflect() protoreflect.Message {
	mi := &file_chat_member_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatMember.ProtoReflect.Descriptor instead.
func (*ChatMember) Descriptor() ([]byte, []int) {
	return file_chat_member_proto_rawDescGZIP(), []int{1}
}

func (x *ChatMember) GetType() isChatMember_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *ChatMember) GetOwner() *ChatMemberOwner {
	if x != nil {
		if x, ok := x.Type.(*ChatMember_Owner); ok {
			return x.Owner
		}
	}
	return nil
}

func (x *ChatMember) GetAdministrator() *ChatMemberAdministrator {
	if x != nil {
		if x, ok := x.Type.(*ChatMember_Administrator); ok {
			return x.Administrator
		}
	}
	return nil
}

func (x *ChatMember) GetMember() *ChatMemberMember {
	if x != nil {
		if x, ok := x.Type.(*ChatMember_Member); ok {
			return x.Member
		}
	}
	return nil
}

func (x *ChatMember) GetRestricted() *ChatMemberRestricted {
	if x != nil {
		if x, ok := x.Type.(*ChatMember_Restricted); ok {
			return x.Restricted
		}
	}
	return nil
}

func (x *ChatMember) GetLeft() *ChatMemberLeft {
	if x != nil {
		if x, ok := x.Type.(*ChatMember_Left); ok {
			return x.Left
		}
	}
	return nil
}

func (x *ChatMember) GetBanned() *ChatMemberBanned {
	if x != nil {
		if x, ok := x.Type.(*ChatMember_Banned); ok {
			return x.Banned
		}
	}
	return nil
}

type isChatMember_Type interface {
	isChatMember_Type()
}

type ChatMember_Owner struct {
	Owner *ChatMemberOwner `protobuf:"bytes,1,opt,name=owner,proto3,oneof"`
}

type ChatMember_Administrator struct {
	Administrator *ChatMemberAdministrator `protobuf:"bytes,2,opt,name=administrator,proto3,oneof"`
}

type ChatMember_Member struct {
	Member *ChatMemberMember `protobuf:"bytes,3,opt,name=member,proto3,oneof"`
}

type ChatMember_Restricted struct {
	Restricted *ChatMemberRestricted `protobuf:"bytes,4,opt,name=restricted,proto3,oneof"`
}

type ChatMember_Left struct {
	Left *ChatMemberLeft `protobuf:"bytes,5,opt,name=left,proto3,oneof"`
}

type ChatMember_Banned struct {
	Banned *ChatMemberBanned `protobuf:"bytes,6,opt,name=banned,proto3,oneof"`
}

func (*ChatMember_Owner) isChatMember_Type() {}

func (*ChatMember_Administrator) isChatMember_Type() {}

func (*ChatMember_Member) isChatMember_Type() {}

func (*ChatMember_Restricted) isChatMember_Type() {}

func (*ChatMember_Left) isChatMember_Type() {}

func (*ChatMember_Banned) isChatMember_Type() {}

type ChatMemberOwner struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	User          *User                  `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	IsAnonymous   bool                   `protobuf:"varint,3,opt,name=is_anonymous,json=isAnonymous,proto3" json:"is_anonymous,omitempty"`
	CustomTitle   *string                `protobuf:"bytes,4,opt,name=custom_title,json=customTitle,proto3,oneof" json:"custom_title,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChatMemberOwner) Reset() {
	*x = ChatMemberOwner{}
	mi := &file_chat_member_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatMemberOwner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatMemberOwner) ProtoMessage() {}

func (x *ChatMemberOwner) ProtoReflect() protoreflect.Message {
	mi := &file_chat_member_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatMemberOwner.ProtoReflect.Descriptor instead.
func (*ChatMemberOwner) Descriptor() ([]byte, []int) {
	return file_chat_member_proto_rawDescGZIP(), []int{2}
}

func (x *ChatMemberOwner) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ChatMemberOwner) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *ChatMemberOwner) GetIsAnonymous() bool {
	if x != nil {
		return x.IsAnonymous
	}
	return false
}

func (x *ChatMemberOwner) GetCustomTitle() string {
	if x != nil && x.CustomTitle != nil {
		return *x.CustomTitle
	}
	return ""
}

type ChatMemberAdministrator struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	User                *User                  `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	CanBeEdited         bool                   `protobuf:"varint,2,opt,name=can_be_edited,json=canBeEdited,proto3" json:"can_be_edited,omitempty"`
	IsAnonymous         bool                   `protobuf:"varint,3,opt,name=is_anonymous,json=isAnonymous,proto3" json:"is_anonymous,omitempty"`
	CanManageChat       bool                   `protobuf:"varint,4,opt,name=can_manage_chat,json=canManageChat,proto3" json:"can_manage_chat,omitempty"`
	CanDeleteMessages   bool                   `protobuf:"varint,5,opt,name=can_delete_messages,json=canDeleteMessages,proto3" json:"can_delete_messages,omitempty"`
	CanManageVideoChats bool                   `protobuf:"varint,6,opt,name=can_manage_video_chats,json=canManageVideoChats,proto3" json:"can_manage_video_chats,omitempty"`
	CanRestrictMembers  bool                   `protobuf:"varint,7,opt,name=can_restrict_members,json=canRestrictMembers,proto3" json:"can_restrict_members,omitempty"`
	CanPromoteMembers   bool                   `protobuf:"varint,8,opt,name=can_promote_members,json=canPromoteMembers,proto3" json:"can_promote_members,omitempty"`
	CanChangeInfo       bool                   `protobuf:"varint,9,opt,name=can_change_info,json=canChangeInfo,proto3" json:"can_change_info,omitempty"`
	CanInviteUsers      bool                   `protobuf:"varint,10,opt,name=can_invite_users,json=canInviteUsers,proto3" json:"can_invite_users,omitempty"`
	CanPostStories      bool                   `protobuf:"varint,11,opt,name=can_post_stories,json=canPostStories,proto3" json:"can_post_stories,omitempty"`
	CanEditStories      bool                   `protobuf:"varint,12,opt,name=can_edit_stories,json=canEditStories,proto3" json:"can_edit_stories,omitempty"`
	CanDeleteStories    bool                   `protobuf:"varint,13,opt,name=can_delete_stories,json=canDeleteStories,proto3" json:"can_delete_stories,omitempty"`
	CanPostMessages     *bool                  `protobuf:"varint,14,opt,name=can_post_messages,json=canPostMessages,proto3,oneof" json:"can_post_messages,omitempty"`
	CanEditMessages     *bool                  `protobuf:"varint,15,opt,name=can_edit_messages,json=canEditMessages,proto3,oneof" json:"can_edit_messages,omitempty"`
	CanPinMessages      *bool                  `protobuf:"varint,16,opt,name=can_pin_messages,json=canPinMessages,proto3,oneof" json:"can_pin_messages,omitempty"`
	CanManageTopics     *bool                  `protobuf:"varint,17,opt,name=can_manage_topics,json=canManageTopics,proto3,oneof" json:"can_manage_topics,omitempty"`
	CustomTitle         *string                `protobuf:"bytes,18,opt,name=custom_title,json=customTitle,proto3,oneof" json:"custom_title,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ChatMemberAdministrator) Reset() {
	*x = ChatMemberAdministrator{}
	mi := &file_chat_member_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatMemberAdministrator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatMemberAdministrator) ProtoMessage() {}

func (x *ChatMemberAdministrator) ProtoReflect() protoreflect.Message {
	mi := &file_chat_member_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatMemberAdministrator.ProtoReflect.Descriptor instead.
func (*ChatMemberAdministrator) Descriptor() ([]byte, []int) {
	return file_chat_member_proto_rawDescGZIP(), []int{3}
}

func (x *ChatMemberAdministrator) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *ChatMemberAdministrator) GetCanBeEdited() bool {
	if x != nil {
		return x.CanBeEdited
	}
	return false
}

func (x *ChatMemberAdministrator) GetIsAnonymous() bool {
	if x != nil {
		return x.IsAnonymous
	}
	return false
}

func (x *ChatMemberAdministrator) GetCanManageChat() bool {
	if x != nil {
		return x.CanManageChat
	}
	return false
}

func (x *ChatMemberAdministrator) GetCanDeleteMessages() bool {
	if x != nil {
		return x.CanDeleteMessages
	}
	return false
}

func (x *ChatMemberAdministrator) GetCanManageVideoChats() bool {
	if x != nil {
		return x.CanManageVideoChats
	}
	return false
}

func (x *ChatMemberAdministrator) GetCanRestrictMembers() bool {
	if x != nil {
		return x.CanRestrictMembers
	}
	return false
}

func (x *ChatMemberAdministrator) GetCanPromoteMembers() bool {
	if x != nil {
		return x.CanPromoteMembers
	}
	return false
}

func (x *ChatMemberAdministrator) GetCanChangeInfo() bool {
	if x != nil {
		return x.CanChangeInfo
	}
	return false
}

func (x *ChatMemberAdministrator) GetCanInviteUsers() bool {
	if x != nil {
		return x.CanInviteUsers
	}
	return false
}

func (x *ChatMemberAdministrator) GetCanPostStories() bool {
	if x != nil {
		return x.CanPostStories
	}
	return false
}

func (x *ChatMemberAdministrator) GetCanEditStories() bool {
	if x != nil {
		return x.CanEditStories
	}
	return false
}

func (x *ChatMemberAdministrator) GetCanDeleteStories() bool {
	if x != nil {
		return x.CanDeleteStories
	}
	return false
}

func (x *ChatMemberAdministrator) GetCanPostMessages() bool {
	if x != nil && x.CanPostMessages != nil {
		return *x.CanPostMessages
	}
	return false
}

func (x *ChatMemberAdministrator) GetCanEditMessages() bool {
	if x != nil && x.CanEditMessages != nil {
		return *x.CanEditMessages
	}
	return false
}

func (x *ChatMemberAdministrator) GetCanPinMessages() bool {
	if x != nil && x.CanPinMessages != nil {
		return *x.CanPinMessages
	}
	return false
}

func (x *ChatMemberAdministrator) GetCanManageTopics() bool {
	if x != nil && x.CanManageTopics != nil {
		return *x.CanManageTopics
	}
	return false
}

func (x *ChatMemberAdministrator) GetCustomTitle() string {
	if x != nil && x.CustomTitle != nil {
		return *x.CustomTitle
	}
	return ""
}

type ChatMemberMember struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	User          *User                  `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	UntilDate     *int32                 `protobuf:"varint,3,opt,name=until_date,json=untilDate,proto3,oneof" json:"until_date,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChatMemberMember) Reset() {
	*x = ChatMemberMember{}
	mi := &file_chat_member_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatMemberMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatMemberMember) ProtoMessage() {}

func (x *ChatMemberMember) ProtoReflect() protoreflect.Message {
	mi := &file_chat_member_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatMemberMember.ProtoReflect.Descriptor instead.
func (*ChatMemberMember) Descriptor() ([]byte, []int) {
	return file_chat_member_proto_rawDescGZIP(), []int{4}
}

func (x *ChatMemberMember) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ChatMemberMember) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *ChatMemberMember) GetUntilDate() int32 {
	if x != nil && x.UntilDate != nil {
		return *x.UntilDate
	}
	return 0
}

type ChatMemberRestricted struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	Status                string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	User                  *User                  `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	IsMember              bool                   `protobuf:"varint,3,opt,name=is_member,json=isMember,proto3" json:"is_member,omitempty"`
	CanSendMessages       bool                   `protobuf:"varint,4,opt,name=can_send_messages,json=canSendMessages,proto3" json:"can_send_messages,omitempty"`
	CanSendAudios         bool                   `protobuf:"varint,5,opt,name=can_send_audios,json=canSendAudios,proto3" json:"can_send_audios,omitempty"`
	CanSendDocuments      bool                   `protobuf:"varint,6,opt,name=can_send_documents,json=canSendDocuments,proto3" json:"can_send_documents,omitempty"`
	CanSendPhotos         bool                   `protobuf:"varint,7,opt,name=can_send_photos,json=canSendPhotos,proto3" json:"can_send_photos,omitempty"`
	CanSendVideos         bool                   `protobuf:"varint,8,opt,name=can_send_videos,json=canSendVideos,proto3" json:"can_send_videos,omitempty"`
	CanSendVideoNotes     bool                   `protobuf:"varint,9,opt,name=can_send_video_notes,json=canSendVideoNotes,proto3" json:"can_send_video_notes,omitempty"`
	CanSendVoiceNotes     bool                   `protobuf:"varint,10,opt,name=can_send_voice_notes,json=canSendVoiceNotes,proto3" json:"can_send_voice_notes,omitempty"`
	CanSendPolls          bool                   `protobuf:"varint,11,opt,name=can_send_polls,json=canSendPolls,proto3" json:"can_send_polls,omitempty"`
	CanSendOtherMessages  bool                   `protobuf:"varint,12,opt,name=can_send_other_messages,json=canSendOtherMessages,proto3" json:"can_send_other_messages,omitempty"`
	CanAddWebPagePreviews bool                   `protobuf:"varint,13,opt,name=can_add_web_page_previews,json=canAddWebPagePreviews,proto3" json:"can_add_web_page_previews,omitempty"`
	CanChangeInfo         bool                   `protobuf:"varint,14,opt,name=can_change_info,json=canChangeInfo,proto3" json:"can_change_info,omitempty"`
	CanInviteUsers        bool                   `protobuf:"varint,15,opt,name=can_invite_users,json=canInviteUsers,proto3" json:"can_invite_users,omitempty"`
	CanPinMessages        bool                   `protobuf:"varint,16,opt,name=can_pin_messages,json=canPinMessages,proto3" json:"can_pin_messages,omitempty"`
	CanManageTopics       bool                   `protobuf:"varint,17,opt,name=can_manage_topics,json=canManageTopics,proto3" json:"can_manage_topics,omitempty"`
	UntilDate             *int32                 `protobuf:"varint,18,opt,name=until_date,json=untilDate,proto3,oneof" json:"until_date,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *ChatMemberRestricted) Reset() {
	*x = ChatMemberRestricted{}
	mi := &file_chat_member_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatMemberRestricted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatMemberRestricted) ProtoMessage() {}

func (x *ChatMemberRestricted) ProtoReflect() protoreflect.Message {
	mi := &file_chat_member_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatMemberRestricted.ProtoReflect.Descriptor instead.
func (*ChatMemberRestricted) Descriptor() ([]byte, []int) {
	return file_chat_member_proto_rawDescGZIP(), []int{5}
}

func (x *ChatMemberRestricted) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ChatMemberRestricted) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *ChatMemberRestricted) GetIsMember() bool {
	if x != nil {
		return x.IsMember
	}
	return false
}

func (x *ChatMemberRestricted) GetCanSendMessages() bool {
	if x != nil {
		return x.CanSendMessages
	}
	return false
}

func (x *ChatMemberRestricted) GetCanSendAudios() bool {
	if x != nil {
		return x.CanSendAudios
	}
	return false
}

func (x *ChatMemberRestricted) GetCanSendDocuments() bool {
	if x != nil {
		return x.CanSendDocuments
	}
	return false
}

func (x *ChatMemberRestricted) GetCanSendPhotos() bool {
	if x != nil {
		return x.CanSendPhotos
	}
	return false
}

func (x *ChatMemberRestricted) GetCanSendVideos() bool {
	if x != nil {
		return x.CanSendVideos
	}
	return false
}

func (x *ChatMemberRestricted) GetCanSendVideoNotes() bool {
	if x != nil {
		return x.CanSendVideoNotes
	}
	return false
}

func (x *ChatMemberRestricted) GetCanSendVoiceNotes() bool {
	if x != nil {
		return x.CanSendVoiceNotes
	}
	return false
}

func (x *ChatMemberRestricted) GetCanSendPolls() bool {
	if x != nil {
		return x.CanSendPolls
	}
	return false
}

func (x *ChatMemberRestricted) GetCanSendOtherMessages() bool {
	if x != nil {
		return x.CanSendOtherMessages
	}
	return false
}

func (x *ChatMemberRestricted) GetCanAddWebPagePreviews() bool {
	if x != nil {
		return x.CanAddWebPagePreviews
	}
	return false
}

func (x *ChatMemberRestricted) GetCanChangeInfo() bool {
	if x != nil {
		return x.CanChangeInfo
	}
	return false
}

func (x *ChatMemberRestricted) GetCanInviteUsers() bool {
	if x != nil {
		return x.CanInviteUsers
	}
	return false
}

func (x *ChatMemberRestricted) GetCanPinMessages() bool {
	if x != nil {
		return x.CanPinMessages
	}
	return false
}

func (x *ChatMemberRestricted) GetCanManageTopics() bool {
	if x != nil {
		return x.CanManageTopics
	}
	return false
}

func (x *ChatMemberRestricted) GetUntilDate() int32 {
	if x != nil && x.UntilDate != nil {
		return *x.UntilDate
	}
	return 0
}

type ChatMemberLeft struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	User          *User                  `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChatMemberLeft) Reset() {
	*x = ChatMemberLeft{}
	mi := &file_chat_member_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatMemberLeft) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatMemberLeft) ProtoMessage() {}

func (x *ChatMemberLeft) ProtoReflect() protoreflect.Message {
	mi := &file_chat_member_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatMemberLeft.ProtoReflect.Descriptor instead.
func (*ChatMemberLeft) Descriptor() ([]byte, []int) {
	return file_chat_member_proto_rawDescGZIP(), []int{6}
}

func (x *ChatMemberLeft) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ChatMemberLeft) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

type ChatMemberBanned struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	User          *User                  `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	UntilDate     int32                  `protobuf:"varint,3,opt,name=until_date,json=untilDate,proto3" json:"until_date,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChatMemberBanned) Reset() {
	*x = ChatMemberBanned{}
	mi := &file_chat_member_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatMemberBanned) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatMemberBanned) ProtoMessage() {}

func (x *ChatMemberBanned) ProtoReflect() protoreflect.Message {
	mi := &file_chat_member_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatMemberBanned.ProtoReflect.Descriptor instead.
func (*ChatMemberBanned) Descriptor() ([]byte, []int) {
	return file_chat_member_proto_rawDescGZIP(), []int{7}
}

func (x *ChatMemberBanned) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ChatMemberBanned) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *ChatMemberBanned) GetUntilDate() int32 {
	if x != nil {
		return x.UntilDate
	}
	return 0
}

var File_chat_member_proto protoreflect.FileDescriptor

var file_chat_member_proto_rawDesc = string([]byte{
	0x0a, 0x11, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x0a, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x63, 0x68, 0x61,
	0x74, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xbb, 0x03, 0x0a, 0x13, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x04, 0x63,
	0x68, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x63, 0x68, 0x61, 0x74,
	0x52, 0x04, 0x63, 0x68, 0x61, 0x74, 0x12, 0x19, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x52, 0x04, 0x66, 0x72, 0x6f,
	0x6d, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x0f, 0x6f, 0x6c, 0x64, 0x5f, 0x63, 0x68, 0x61,
	0x74, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0d, 0x6f, 0x6c,
	0x64, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x0f, 0x6e,
	0x65, 0x77, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x52, 0x0d, 0x6e, 0x65, 0x77, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x37, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x76, 0x69,
	0x61, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x0e, 0x76, 0x69, 0x61, 0x4a, 0x6f, 0x69, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x1b, 0x76, 0x69, 0x61,
	0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02,
	0x52, 0x17, 0x76, 0x69, 0x61, 0x43, 0x68, 0x61, 0x74, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x42, 0x13, 0x0a, 0x11,
	0x5f, 0x76, 0x69, 0x61, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x42, 0x1e, 0x0a, 0x1c, 0x5f, 0x76, 0x69, 0x61, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x66,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6e,
	0x6b, 0x22, 0xc7, 0x02, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x2a, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x48, 0x00, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x42, 0x0a,
	0x0d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x48, 0x00, 0x52, 0x0d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x2d, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x48, 0x00, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x39, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52,
	0x0a, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x04, 0x6c,
	0x65, 0x66, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x68, 0x61, 0x74,
	0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x48, 0x00, 0x52, 0x04,
	0x6c, 0x65, 0x66, 0x74, 0x12, 0x2d, 0x0a, 0x06, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x48, 0x00, 0x52, 0x06, 0x62, 0x61, 0x6e,
	0x6e, 0x65, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xa2, 0x01, 0x0a, 0x11,
	0x63, 0x68, 0x61, 0x74, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x52, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x61, 0x6e, 0x6f, 0x6e, 0x79,
	0x6d, 0x6f, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x41, 0x6e,
	0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x22, 0x92, 0x07, 0x0a, 0x19, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x19,
	0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x61, 0x6e,
	0x5f, 0x62, 0x65, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x63, 0x61, 0x6e, 0x42, 0x65, 0x45, 0x64, 0x69, 0x74, 0x65, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x69, 0x73, 0x5f, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x41, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73,
	0x12, 0x26, 0x0a, 0x0f, 0x63, 0x61, 0x6e, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x5f, 0x63,
	0x68, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x63, 0x61, 0x6e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x61, 0x6e, 0x5f,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x63, 0x61, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x63, 0x61, 0x6e, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x63, 0x68, 0x61,
	0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x63, 0x61, 0x6e, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x68, 0x61, 0x74, 0x73, 0x12, 0x30, 0x0a,
	0x14, 0x63, 0x61, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x5f, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x63, 0x61, 0x6e,
	0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12,
	0x2e, 0x0a, 0x13, 0x63, 0x61, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x63, 0x61,
	0x6e, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12,
	0x26, 0x0a, 0x0f, 0x63, 0x61, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x63, 0x61, 0x6e, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x61, 0x6e, 0x5f, 0x69,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x63, 0x61, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x61, 0x6e, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x73, 0x74,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x63, 0x61, 0x6e,
	0x50, 0x6f, 0x73, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x63,
	0x61, 0x6e, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x63, 0x61, 0x6e, 0x45, 0x64, 0x69, 0x74, 0x53, 0x74,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x61, 0x6e, 0x5f, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x63, 0x61, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x11, 0x63, 0x61, 0x6e, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00,
	0x52, 0x0f, 0x63, 0x61, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x63, 0x61, 0x6e, 0x5f, 0x65, 0x64, 0x69, 0x74,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x01, 0x52, 0x0f, 0x63, 0x61, 0x6e, 0x45, 0x64, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x63, 0x61, 0x6e, 0x5f, 0x70, 0x69, 0x6e,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x02, 0x52, 0x0e, 0x63, 0x61, 0x6e, 0x50, 0x69, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x63, 0x61, 0x6e, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x03, 0x52, 0x0f, 0x63, 0x61, 0x6e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x73, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0b, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x42, 0x14, 0x0a,
	0x12, 0x5f, 0x63, 0x61, 0x6e, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x63, 0x61, 0x6e, 0x5f, 0x65, 0x64, 0x69, 0x74,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x63, 0x61,
	0x6e, 0x5f, 0x70, 0x69, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x42, 0x14,
	0x0a, 0x12, 0x5f, 0x63, 0x61, 0x6e, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x7a, 0x0a, 0x12, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x05, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x22,
	0x0a, 0x0a, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x00, 0x52, 0x09, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x88,
	0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x22, 0x8e, 0x06, 0x0a, 0x16, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x05, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12,
	0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x11,
	0x63, 0x61, 0x6e, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x63, 0x61, 0x6e, 0x53, 0x65, 0x6e, 0x64,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x61, 0x6e, 0x5f,
	0x73, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x63, 0x61, 0x6e, 0x53, 0x65, 0x6e, 0x64, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x73,
	0x12, 0x2c, 0x0a, 0x12, 0x63, 0x61, 0x6e, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x63, 0x61,
	0x6e, 0x53, 0x65, 0x6e, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x26,
	0x0a, 0x0f, 0x63, 0x61, 0x6e, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x68, 0x6f, 0x74, 0x6f,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x63, 0x61, 0x6e, 0x53, 0x65, 0x6e, 0x64,
	0x50, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x61, 0x6e, 0x5f, 0x73, 0x65,
	0x6e, 0x64, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x63, 0x61, 0x6e, 0x53, 0x65, 0x6e, 0x64, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x12, 0x2f,
	0x0a, 0x14, 0x63, 0x61, 0x6e, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x63, 0x61,
	0x6e, 0x53, 0x65, 0x6e, 0x64, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12,
	0x2f, 0x0a, 0x14, 0x63, 0x61, 0x6e, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x63,
	0x61, 0x6e, 0x53, 0x65, 0x6e, 0x64, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x74, 0x65, 0x73,
	0x12, 0x24, 0x0a, 0x0e, 0x63, 0x61, 0x6e, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x6c,
	0x6c, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x63, 0x61, 0x6e, 0x53, 0x65, 0x6e,
	0x64, 0x50, 0x6f, 0x6c, 0x6c, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x63, 0x61, 0x6e, 0x5f, 0x73, 0x65,
	0x6e, 0x64, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x63, 0x61, 0x6e, 0x53, 0x65, 0x6e, 0x64,
	0x4f, 0x74, 0x68, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x38, 0x0a,
	0x19, 0x63, 0x61, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x15, 0x63, 0x61, 0x6e, 0x41, 0x64, 0x64, 0x57, 0x65, 0x62, 0x50, 0x61, 0x67, 0x65, 0x50,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x61, 0x6e, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x63, 0x61, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x28, 0x0a, 0x10, 0x63, 0x61, 0x6e, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x63, 0x61, 0x6e, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x61, 0x6e,
	0x5f, 0x70, 0x69, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x63, 0x61, 0x6e, 0x50, 0x69, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x61, 0x6e, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x63, 0x61, 0x6e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x12,
	0x22, 0x0a, 0x0a, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x09, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x44, 0x61, 0x74, 0x65,
	0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x22, 0x45, 0x0a, 0x10, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19,
	0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0x66, 0x0a, 0x12, 0x63, 0x68, 0x61,
	0x74, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x44, 0x61, 0x74,
	0x65, 0x42, 0x18, 0x5a, 0x16, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2f, 0x74,
	0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x2d, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
})

var (
	file_chat_member_proto_rawDescOnce sync.Once
	file_chat_member_proto_rawDescData []byte
)

func file_chat_member_proto_rawDescGZIP() []byte {
	file_chat_member_proto_rawDescOnce.Do(func() {
		file_chat_member_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_chat_member_proto_rawDesc), len(file_chat_member_proto_rawDesc)))
	})
	return file_chat_member_proto_rawDescData
}

var file_chat_member_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_chat_member_proto_goTypes = []any{
	(*ChatMemberUpdated)(nil),       // 0: chat_member_updated
	(*ChatMember)(nil),              // 1: chat_member
	(*ChatMemberOwner)(nil),         // 2: chat_member_owner
	(*ChatMemberAdministrator)(nil), // 3: chat_member_administrator
	(*ChatMemberMember)(nil),        // 4: chat_member_member
	(*ChatMemberRestricted)(nil),    // 5: chat_member_restricted
	(*ChatMemberLeft)(nil),          // 6: chat_member_left
	(*ChatMemberBanned)(nil),        // 7: chat_member_banned
	(*Chat)(nil),                    // 8: chat
	(*User)(nil),                    // 9: user
	(*ChatInviteLink)(nil),          // 10: chat_invite_link
}
var file_chat_member_proto_depIdxs = []int32{
	8,  // 0: chat_member_updated.chat:type_name -> chat
	9,  // 1: chat_member_updated.from:type_name -> user
	1,  // 2: chat_member_updated.old_chat_member:type_name -> chat_member
	1,  // 3: chat_member_updated.new_chat_member:type_name -> chat_member
	10, // 4: chat_member_updated.invite_link:type_name -> chat_invite_link
	2,  // 5: chat_member.owner:type_name -> chat_member_owner
	3,  // 6: chat_member.administrator:type_name -> chat_member_administrator
	4,  // 7: chat_member.member:type_name -> chat_member_member
	5,  // 8: chat_member.restricted:type_name -> chat_member_restricted
	6,  // 9: chat_member.left:type_name -> chat_member_left
	7,  // 10: chat_member.banned:type_name -> chat_member_banned
	9,  // 11: chat_member_owner.user:type_name -> user
	9,  // 12: chat_member_administrator.user:type_name -> user
	9,  // 13: chat_member_member.user:type_name -> user
	9,  // 14: chat_member_restricted.user:type_name -> user
	9,  // 15: chat_member_left.user:type_name -> user
	9,  // 16: chat_member_banned.user:type_name -> user
	17, // [17:17] is the sub-list for method output_type
	17, // [17:17] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_chat_member_proto_init() }
func file_chat_member_proto_init() {
	if File_chat_member_proto != nil {
		return
	}
	file_chat_proto_init()
	file_user_proto_init()
	file_chat_invite_link_proto_init()
	file_chat_member_proto_msgTypes[0].OneofWrappers = []any{}
	file_chat_member_proto_msgTypes[1].OneofWrappers = []any{
		(*ChatMember_Owner)(nil),
		(*ChatMember_Administrator)(nil),
		(*ChatMember_Member)(nil),
		(*ChatMember_Restricted)(nil),
		(*ChatMember_Left)(nil),
		(*ChatMember_Banned)(nil),
	}
	file_chat_member_proto_msgTypes[2].OneofWrappers = []any{}
	file_chat_member_proto_msgTypes[3].OneofWrappers = []any{}
	file_chat_member_proto_msgTypes[4].OneofWrappers = []any{}
	file_chat_member_proto_msgTypes[5].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_chat_member_proto_rawDesc), len(file_chat_member_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chat_member_proto_goTypes,
		DependencyIndexes: file_chat_member_proto_depIdxs,
		MessageInfos:      file_chat_member_proto_msgTypes,
	}.Build()
	File_chat_member_proto = out.File
	file_chat_member_proto_goTypes = nil
	file_chat_member_proto_depIdxs = nil
}
