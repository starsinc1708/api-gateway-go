// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: inline_keyboard.proto

package telegram_api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type InlineKeyboardMarkup struct {
	state          protoimpl.MessageState  `protogen:"open.v1"`
	InlineKeyboard []*InlineKeyboardButton `protobuf:"bytes,1,rep,name=inline_keyboard,json=inlineKeyboard,proto3" json:"inline_keyboard,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *InlineKeyboardMarkup) Reset() {
	*x = InlineKeyboardMarkup{}
	mi := &file_inline_keyboard_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InlineKeyboardMarkup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InlineKeyboardMarkup) ProtoMessage() {}

func (x *InlineKeyboardMarkup) ProtoReflect() protoreflect.Message {
	mi := &file_inline_keyboard_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InlineKeyboardMarkup.ProtoReflect.Descriptor instead.
func (*InlineKeyboardMarkup) Descriptor() ([]byte, []int) {
	return file_inline_keyboard_proto_rawDescGZIP(), []int{0}
}

func (x *InlineKeyboardMarkup) GetInlineKeyboard() []*InlineKeyboardButton {
	if x != nil {
		return x.InlineKeyboard
	}
	return nil
}

type InlineKeyboardButton struct {
	state                        protoimpl.MessageState       `protogen:"open.v1"`
	Text                         string                       `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Url                          *string                      `protobuf:"bytes,2,opt,name=url,proto3,oneof" json:"url,omitempty"`
	CallbackData                 *string                      `protobuf:"bytes,3,opt,name=callback_data,json=callbackData,proto3,oneof" json:"callback_data,omitempty"`
	WebApp                       *WebAppInfo                  `protobuf:"bytes,4,opt,name=web_app,json=webApp,proto3,oneof" json:"web_app,omitempty"`
	LoginUrl                     *LoginUrl                    `protobuf:"bytes,5,opt,name=login_url,json=loginUrl,proto3,oneof" json:"login_url,omitempty"`
	SwitchInlineQuery            *string                      `protobuf:"bytes,6,opt,name=switch_inline_query,json=switchInlineQuery,proto3,oneof" json:"switch_inline_query,omitempty"`
	SwitchInlineQueryCurrentChat *string                      `protobuf:"bytes,7,opt,name=switch_inline_query_current_chat,json=switchInlineQueryCurrentChat,proto3,oneof" json:"switch_inline_query_current_chat,omitempty"`
	SwitchInlineQueryChosenChat  *SwitchInlineQueryChosenChat `protobuf:"bytes,8,opt,name=switch_inline_query_chosen_chat,json=switchInlineQueryChosenChat,proto3,oneof" json:"switch_inline_query_chosen_chat,omitempty"`
	CopyText                     *CopyTextButton              `protobuf:"bytes,9,opt,name=copy_text,json=copyText,proto3,oneof" json:"copy_text,omitempty"`
	CallbackGame                 *CallbackGame                `protobuf:"bytes,10,opt,name=callback_game,json=callbackGame,proto3,oneof" json:"callback_game,omitempty"`
	Pay                          *bool                        `protobuf:"varint,11,opt,name=pay,proto3,oneof" json:"pay,omitempty"`
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *InlineKeyboardButton) Reset() {
	*x = InlineKeyboardButton{}
	mi := &file_inline_keyboard_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InlineKeyboardButton) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InlineKeyboardButton) ProtoMessage() {}

func (x *InlineKeyboardButton) ProtoReflect() protoreflect.Message {
	mi := &file_inline_keyboard_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InlineKeyboardButton.ProtoReflect.Descriptor instead.
func (*InlineKeyboardButton) Descriptor() ([]byte, []int) {
	return file_inline_keyboard_proto_rawDescGZIP(), []int{1}
}

func (x *InlineKeyboardButton) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *InlineKeyboardButton) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *InlineKeyboardButton) GetCallbackData() string {
	if x != nil && x.CallbackData != nil {
		return *x.CallbackData
	}
	return ""
}

func (x *InlineKeyboardButton) GetWebApp() *WebAppInfo {
	if x != nil {
		return x.WebApp
	}
	return nil
}

func (x *InlineKeyboardButton) GetLoginUrl() *LoginUrl {
	if x != nil {
		return x.LoginUrl
	}
	return nil
}

func (x *InlineKeyboardButton) GetSwitchInlineQuery() string {
	if x != nil && x.SwitchInlineQuery != nil {
		return *x.SwitchInlineQuery
	}
	return ""
}

func (x *InlineKeyboardButton) GetSwitchInlineQueryCurrentChat() string {
	if x != nil && x.SwitchInlineQueryCurrentChat != nil {
		return *x.SwitchInlineQueryCurrentChat
	}
	return ""
}

func (x *InlineKeyboardButton) GetSwitchInlineQueryChosenChat() *SwitchInlineQueryChosenChat {
	if x != nil {
		return x.SwitchInlineQueryChosenChat
	}
	return nil
}

func (x *InlineKeyboardButton) GetCopyText() *CopyTextButton {
	if x != nil {
		return x.CopyText
	}
	return nil
}

func (x *InlineKeyboardButton) GetCallbackGame() *CallbackGame {
	if x != nil {
		return x.CallbackGame
	}
	return nil
}

func (x *InlineKeyboardButton) GetPay() bool {
	if x != nil && x.Pay != nil {
		return *x.Pay
	}
	return false
}

type LoginUrl struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Url                string                 `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	ForwardText        *string                `protobuf:"bytes,2,opt,name=forward_text,json=forwardText,proto3,oneof" json:"forward_text,omitempty"`
	BotUsername        *string                `protobuf:"bytes,3,opt,name=bot_username,json=botUsername,proto3,oneof" json:"bot_username,omitempty"`
	RequestWriteAccess *bool                  `protobuf:"varint,4,opt,name=request_write_access,json=requestWriteAccess,proto3,oneof" json:"request_write_access,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *LoginUrl) Reset() {
	*x = LoginUrl{}
	mi := &file_inline_keyboard_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoginUrl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginUrl) ProtoMessage() {}

func (x *LoginUrl) ProtoReflect() protoreflect.Message {
	mi := &file_inline_keyboard_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginUrl.ProtoReflect.Descriptor instead.
func (*LoginUrl) Descriptor() ([]byte, []int) {
	return file_inline_keyboard_proto_rawDescGZIP(), []int{2}
}

func (x *LoginUrl) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *LoginUrl) GetForwardText() string {
	if x != nil && x.ForwardText != nil {
		return *x.ForwardText
	}
	return ""
}

func (x *LoginUrl) GetBotUsername() string {
	if x != nil && x.BotUsername != nil {
		return *x.BotUsername
	}
	return ""
}

func (x *LoginUrl) GetRequestWriteAccess() bool {
	if x != nil && x.RequestWriteAccess != nil {
		return *x.RequestWriteAccess
	}
	return false
}

type SwitchInlineQueryChosenChat struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Query             *string                `protobuf:"bytes,1,opt,name=query,proto3,oneof" json:"query,omitempty"`
	AllowUserChats    *bool                  `protobuf:"varint,2,opt,name=allow_user_chats,json=allowUserChats,proto3,oneof" json:"allow_user_chats,omitempty"`
	AllowBotChats     *bool                  `protobuf:"varint,3,opt,name=allow_bot_chats,json=allowBotChats,proto3,oneof" json:"allow_bot_chats,omitempty"`
	AllowGroupChats   *bool                  `protobuf:"varint,4,opt,name=allow_group_chats,json=allowGroupChats,proto3,oneof" json:"allow_group_chats,omitempty"`
	AllowChannelChats *bool                  `protobuf:"varint,5,opt,name=allow_channel_chats,json=allowChannelChats,proto3,oneof" json:"allow_channel_chats,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *SwitchInlineQueryChosenChat) Reset() {
	*x = SwitchInlineQueryChosenChat{}
	mi := &file_inline_keyboard_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SwitchInlineQueryChosenChat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchInlineQueryChosenChat) ProtoMessage() {}

func (x *SwitchInlineQueryChosenChat) ProtoReflect() protoreflect.Message {
	mi := &file_inline_keyboard_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchInlineQueryChosenChat.ProtoReflect.Descriptor instead.
func (*SwitchInlineQueryChosenChat) Descriptor() ([]byte, []int) {
	return file_inline_keyboard_proto_rawDescGZIP(), []int{3}
}

func (x *SwitchInlineQueryChosenChat) GetQuery() string {
	if x != nil && x.Query != nil {
		return *x.Query
	}
	return ""
}

func (x *SwitchInlineQueryChosenChat) GetAllowUserChats() bool {
	if x != nil && x.AllowUserChats != nil {
		return *x.AllowUserChats
	}
	return false
}

func (x *SwitchInlineQueryChosenChat) GetAllowBotChats() bool {
	if x != nil && x.AllowBotChats != nil {
		return *x.AllowBotChats
	}
	return false
}

func (x *SwitchInlineQueryChosenChat) GetAllowGroupChats() bool {
	if x != nil && x.AllowGroupChats != nil {
		return *x.AllowGroupChats
	}
	return false
}

func (x *SwitchInlineQueryChosenChat) GetAllowChannelChats() bool {
	if x != nil && x.AllowChannelChats != nil {
		return *x.AllowChannelChats
	}
	return false
}

type CopyTextButton struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Text          string                 `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CopyTextButton) Reset() {
	*x = CopyTextButton{}
	mi := &file_inline_keyboard_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CopyTextButton) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyTextButton) ProtoMessage() {}

func (x *CopyTextButton) ProtoReflect() protoreflect.Message {
	mi := &file_inline_keyboard_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyTextButton.ProtoReflect.Descriptor instead.
func (*CopyTextButton) Descriptor() ([]byte, []int) {
	return file_inline_keyboard_proto_rawDescGZIP(), []int{4}
}

func (x *CopyTextButton) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type CallbackGame struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CallbackGame) Reset() {
	*x = CallbackGame{}
	mi := &file_inline_keyboard_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CallbackGame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallbackGame) ProtoMessage() {}

func (x *CallbackGame) ProtoReflect() protoreflect.Message {
	mi := &file_inline_keyboard_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallbackGame.ProtoReflect.Descriptor instead.
func (*CallbackGame) Descriptor() ([]byte, []int) {
	return file_inline_keyboard_proto_rawDescGZIP(), []int{5}
}

var File_inline_keyboard_proto protoreflect.FileDescriptor

var file_inline_keyboard_proto_rawDesc = string([]byte{
	0x0a, 0x15, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5a, 0x0a, 0x16, 0x69,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x6d,
	0x61, 0x72, 0x6b, 0x75, 0x70, 0x12, 0x40, 0x0a, 0x0f, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x6b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52, 0x0e, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x4b,
	0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x22, 0xfa, 0x05, 0x0a, 0x16, 0x69, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x62, 0x75, 0x74, 0x74,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x15, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a,
	0x0d, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0c, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b,
	0x44, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x07, 0x77, 0x65, 0x62, 0x5f, 0x61,
	0x70, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x02, 0x52, 0x06, 0x77, 0x65, 0x62, 0x41, 0x70,
	0x70, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f,
	0x75, 0x72, 0x6c, 0x48, 0x03, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x55, 0x72, 0x6c, 0x88,
	0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x04, 0x52, 0x11, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x20, 0x73, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x5f, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x05, 0x52, 0x1c, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x6b, 0x0a, 0x1f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x69,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x63, 0x68, 0x6f, 0x73,
	0x65, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x5f, 0x63, 0x68, 0x6f, 0x73, 0x65, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x48,
	0x06, 0x52, 0x1b, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x43, 0x68, 0x6f, 0x73, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x33, 0x0a, 0x09, 0x63, 0x6f, 0x70, 0x79, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x70, 0x79, 0x5f, 0x74, 0x65, 0x78, 0x74,
	0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x48, 0x07, 0x52, 0x08, 0x63, 0x6f, 0x70, 0x79, 0x54,
	0x65, 0x78, 0x74, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x0d, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x48, 0x08, 0x52,
	0x0c, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x47, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x15, 0x0a, 0x03, 0x70, 0x61, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x48, 0x09, 0x52,
	0x03, 0x70, 0x61, 0x79, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x75, 0x72, 0x6c, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x70, 0x70, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x16, 0x0a, 0x14, 0x5f,
	0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x42, 0x23, 0x0a, 0x21, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x69,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x42, 0x22, 0x0a, 0x20, 0x5f, 0x73, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x5f, 0x63, 0x68, 0x6f, 0x73, 0x65, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x63, 0x6f, 0x70, 0x79, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63,
	0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x42, 0x06, 0x0a, 0x04,
	0x5f, 0x70, 0x61, 0x79, 0x22, 0xdf, 0x01, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x75,
	0x72, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x12, 0x26, 0x0a, 0x0c, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5f,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x66, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x54, 0x65, 0x78, 0x74, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c,
	0x62, 0x6f, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x62, 0x6f, 0x74, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x02, 0x52, 0x12, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x62, 0x6f, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x17, 0x0a,
	0x15, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0xdf, 0x02, 0x0a, 0x1f, 0x73, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x5f, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x63,
	0x68, 0x6f, 0x73, 0x65, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x12, 0x19, 0x0a, 0x05, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x01, 0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x74,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x62, 0x6f,
	0x74, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52,
	0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x42, 0x6f, 0x74, 0x43, 0x68, 0x61, 0x74, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x2f, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x63, 0x68, 0x61, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x0f,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x68, 0x61, 0x74, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x04, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43,
	0x68, 0x61, 0x74, 0x73, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x63, 0x68, 0x61, 0x74, 0x73, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x5f, 0x62, 0x6f, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x73, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x73,
	0x42, 0x16, 0x0a, 0x14, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x73, 0x22, 0x26, 0x0a, 0x10, 0x63, 0x6f, 0x70, 0x79,
	0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x22, 0x0f, 0x0a, 0x0d, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x67, 0x61, 0x6d,
	0x65, 0x42, 0x18, 0x5a, 0x16, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2f, 0x74,
	0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x2d, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
})

var (
	file_inline_keyboard_proto_rawDescOnce sync.Once
	file_inline_keyboard_proto_rawDescData []byte
)

func file_inline_keyboard_proto_rawDescGZIP() []byte {
	file_inline_keyboard_proto_rawDescOnce.Do(func() {
		file_inline_keyboard_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_inline_keyboard_proto_rawDesc), len(file_inline_keyboard_proto_rawDesc)))
	})
	return file_inline_keyboard_proto_rawDescData
}

var file_inline_keyboard_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_inline_keyboard_proto_goTypes = []any{
	(*InlineKeyboardMarkup)(nil),        // 0: inline_keyboard_markup
	(*InlineKeyboardButton)(nil),        // 1: inline_keyboard_button
	(*LoginUrl)(nil),                    // 2: login_url
	(*SwitchInlineQueryChosenChat)(nil), // 3: switch_inline_query_chosen_chat
	(*CopyTextButton)(nil),              // 4: copy_text_button
	(*CallbackGame)(nil),                // 5: callback_game
	(*WebAppInfo)(nil),                  // 6: web_app_info
}
var file_inline_keyboard_proto_depIdxs = []int32{
	1, // 0: inline_keyboard_markup.inline_keyboard:type_name -> inline_keyboard_button
	6, // 1: inline_keyboard_button.web_app:type_name -> web_app_info
	2, // 2: inline_keyboard_button.login_url:type_name -> login_url
	3, // 3: inline_keyboard_button.switch_inline_query_chosen_chat:type_name -> switch_inline_query_chosen_chat
	4, // 4: inline_keyboard_button.copy_text:type_name -> copy_text_button
	5, // 5: inline_keyboard_button.callback_game:type_name -> callback_game
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_inline_keyboard_proto_init() }
func file_inline_keyboard_proto_init() {
	if File_inline_keyboard_proto != nil {
		return
	}
	file_web_app_data_proto_init()
	file_inline_keyboard_proto_msgTypes[1].OneofWrappers = []any{}
	file_inline_keyboard_proto_msgTypes[2].OneofWrappers = []any{}
	file_inline_keyboard_proto_msgTypes[3].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_inline_keyboard_proto_rawDesc), len(file_inline_keyboard_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_inline_keyboard_proto_goTypes,
		DependencyIndexes: file_inline_keyboard_proto_depIdxs,
		MessageInfos:      file_inline_keyboard_proto_msgTypes,
	}.Build()
	File_inline_keyboard_proto = out.File
	file_inline_keyboard_proto_goTypes = nil
	file_inline_keyboard_proto_depIdxs = nil
}
