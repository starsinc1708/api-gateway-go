// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: poll.proto

package telegram_api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Poll struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	Id                    string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Question              string                 `protobuf:"bytes,2,opt,name=question,proto3" json:"question,omitempty"`
	QuestionEntities      []*MessageEntity       `protobuf:"bytes,3,rep,name=question_entities,json=questionEntities,proto3" json:"question_entities,omitempty"`
	Options               []*PollOption          `protobuf:"bytes,4,rep,name=options,proto3" json:"options,omitempty"`
	TotalVoterCount       int32                  `protobuf:"varint,5,opt,name=total_voter_count,json=totalVoterCount,proto3" json:"total_voter_count,omitempty"`
	IsClosed              bool                   `protobuf:"varint,6,opt,name=is_closed,json=isClosed,proto3" json:"is_closed,omitempty"`
	IsAnonymous           bool                   `protobuf:"varint,7,opt,name=is_anonymous,json=isAnonymous,proto3" json:"is_anonymous,omitempty"`
	Type                  string                 `protobuf:"bytes,8,opt,name=type,proto3" json:"type,omitempty"`
	AllowsMultipleAnswers bool                   `protobuf:"varint,9,opt,name=allows_multiple_answers,json=allowsMultipleAnswers,proto3" json:"allows_multiple_answers,omitempty"`
	CorrectOptionId       *int32                 `protobuf:"varint,10,opt,name=correct_option_id,json=correctOptionId,proto3,oneof" json:"correct_option_id,omitempty"`
	Explanation           *string                `protobuf:"bytes,11,opt,name=explanation,proto3,oneof" json:"explanation,omitempty"`
	ExplanationEntities   []*MessageEntity       `protobuf:"bytes,12,rep,name=explanation_entities,json=explanationEntities,proto3" json:"explanation_entities,omitempty"`
	OpenPeriod            *int32                 `protobuf:"varint,13,opt,name=open_period,json=openPeriod,proto3,oneof" json:"open_period,omitempty"`
	CloseDate             *int64                 `protobuf:"varint,14,opt,name=close_date,json=closeDate,proto3,oneof" json:"close_date,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *Poll) Reset() {
	*x = Poll{}
	mi := &file_poll_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Poll) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Poll) ProtoMessage() {}

func (x *Poll) ProtoReflect() protoreflect.Message {
	mi := &file_poll_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Poll.ProtoReflect.Descriptor instead.
func (*Poll) Descriptor() ([]byte, []int) {
	return file_poll_proto_rawDescGZIP(), []int{0}
}

func (x *Poll) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Poll) GetQuestion() string {
	if x != nil {
		return x.Question
	}
	return ""
}

func (x *Poll) GetQuestionEntities() []*MessageEntity {
	if x != nil {
		return x.QuestionEntities
	}
	return nil
}

func (x *Poll) GetOptions() []*PollOption {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *Poll) GetTotalVoterCount() int32 {
	if x != nil {
		return x.TotalVoterCount
	}
	return 0
}

func (x *Poll) GetIsClosed() bool {
	if x != nil {
		return x.IsClosed
	}
	return false
}

func (x *Poll) GetIsAnonymous() bool {
	if x != nil {
		return x.IsAnonymous
	}
	return false
}

func (x *Poll) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Poll) GetAllowsMultipleAnswers() bool {
	if x != nil {
		return x.AllowsMultipleAnswers
	}
	return false
}

func (x *Poll) GetCorrectOptionId() int32 {
	if x != nil && x.CorrectOptionId != nil {
		return *x.CorrectOptionId
	}
	return 0
}

func (x *Poll) GetExplanation() string {
	if x != nil && x.Explanation != nil {
		return *x.Explanation
	}
	return ""
}

func (x *Poll) GetExplanationEntities() []*MessageEntity {
	if x != nil {
		return x.ExplanationEntities
	}
	return nil
}

func (x *Poll) GetOpenPeriod() int32 {
	if x != nil && x.OpenPeriod != nil {
		return *x.OpenPeriod
	}
	return 0
}

func (x *Poll) GetCloseDate() int64 {
	if x != nil && x.CloseDate != nil {
		return *x.CloseDate
	}
	return 0
}

type PollOption struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Text          string                 `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	TextEntities  []*MessageEntity       `protobuf:"bytes,2,rep,name=text_entities,json=textEntities,proto3" json:"text_entities,omitempty"`
	VoterCount    int32                  `protobuf:"varint,3,opt,name=voter_count,json=voterCount,proto3" json:"voter_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PollOption) Reset() {
	*x = PollOption{}
	mi := &file_poll_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PollOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PollOption) ProtoMessage() {}

func (x *PollOption) ProtoReflect() protoreflect.Message {
	mi := &file_poll_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PollOption.ProtoReflect.Descriptor instead.
func (*PollOption) Descriptor() ([]byte, []int) {
	return file_poll_proto_rawDescGZIP(), []int{1}
}

func (x *PollOption) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *PollOption) GetTextEntities() []*MessageEntity {
	if x != nil {
		return x.TextEntities
	}
	return nil
}

func (x *PollOption) GetVoterCount() int32 {
	if x != nil {
		return x.VoterCount
	}
	return 0
}

type PollAnswer struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PollId        string                 `protobuf:"bytes,1,opt,name=poll_id,json=pollId,proto3" json:"poll_id,omitempty"`
	VoterChat     *Chat                  `protobuf:"bytes,2,opt,name=voter_chat,json=voterChat,proto3,oneof" json:"voter_chat,omitempty"`
	User          *User                  `protobuf:"bytes,3,opt,name=user,proto3,oneof" json:"user,omitempty"`
	OptionIds     []int32                `protobuf:"varint,4,rep,packed,name=option_ids,json=optionIds,proto3" json:"option_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PollAnswer) Reset() {
	*x = PollAnswer{}
	mi := &file_poll_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PollAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PollAnswer) ProtoMessage() {}

func (x *PollAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_poll_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PollAnswer.ProtoReflect.Descriptor instead.
func (*PollAnswer) Descriptor() ([]byte, []int) {
	return file_poll_proto_rawDescGZIP(), []int{2}
}

func (x *PollAnswer) GetPollId() string {
	if x != nil {
		return x.PollId
	}
	return ""
}

func (x *PollAnswer) GetVoterChat() *Chat {
	if x != nil {
		return x.VoterChat
	}
	return nil
}

func (x *PollAnswer) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *PollAnswer) GetOptionIds() []int32 {
	if x != nil {
		return x.OptionIds
	}
	return nil
}

var File_poll_proto protoreflect.FileDescriptor

var file_poll_proto_rawDesc = string([]byte{
	0x0a, 0x0a, 0x70, 0x6f, 0x6c, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0a, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfb, 0x04, 0x0a, 0x04, 0x70,
	0x6f, 0x6c, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3c, 0x0a, 0x11, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x10, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x26, 0x0a,
	0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x70, 0x6f, 0x6c, 0x6c, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x76,
	0x6f, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x6f, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x41, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x5f,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x5f, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x12, 0x2f, 0x0a,
	0x11, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x72, 0x72,
	0x65, 0x63, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x25,
	0x0a, 0x0b, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x14, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0c, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x52, 0x13, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0b, 0x6f, 0x70, 0x65,
	0x6e, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02,
	0x52, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0a, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x03, 0x52, 0x09, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x88, 0x01, 0x01, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x5f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x65, 0x78,
	0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6f, 0x70,
	0x65, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x22, 0x78, 0x0a, 0x0b, 0x70, 0x6f, 0x6c, 0x6c,
	0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x34, 0x0a, 0x0d, 0x74,
	0x65, 0x78, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x52, 0x0c, 0x74, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x6f, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x76, 0x6f, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0xa8, 0x01, 0x0a, 0x0b, 0x70, 0x6f, 0x6c, 0x6c, 0x5f, 0x61, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x0a, 0x76,
	0x6f, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x05, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x48, 0x00, 0x52, 0x09, 0x76, 0x6f, 0x74, 0x65, 0x72, 0x43,
	0x68, 0x61, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x48, 0x01, 0x52, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x72, 0x5f,
	0x63, 0x68, 0x61, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x42, 0x18, 0x5a,
	0x16, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x67,
	0x72, 0x61, 0x6d, 0x2d, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_poll_proto_rawDescOnce sync.Once
	file_poll_proto_rawDescData []byte
)

func file_poll_proto_rawDescGZIP() []byte {
	file_poll_proto_rawDescOnce.Do(func() {
		file_poll_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_poll_proto_rawDesc), len(file_poll_proto_rawDesc)))
	})
	return file_poll_proto_rawDescData
}

var file_poll_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_poll_proto_goTypes = []any{
	(*Poll)(nil),          // 0: poll
	(*PollOption)(nil),    // 1: poll_option
	(*PollAnswer)(nil),    // 2: poll_answer
	(*MessageEntity)(nil), // 3: message_entity
	(*Chat)(nil),          // 4: chat
	(*User)(nil),          // 5: user
}
var file_poll_proto_depIdxs = []int32{
	3, // 0: poll.question_entities:type_name -> message_entity
	1, // 1: poll.options:type_name -> poll_option
	3, // 2: poll.explanation_entities:type_name -> message_entity
	3, // 3: poll_option.text_entities:type_name -> message_entity
	4, // 4: poll_answer.voter_chat:type_name -> chat
	5, // 5: poll_answer.user:type_name -> user
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_poll_proto_init() }
func file_poll_proto_init() {
	if File_poll_proto != nil {
		return
	}
	file_message_entity_proto_init()
	file_chat_proto_init()
	file_user_proto_init()
	file_poll_proto_msgTypes[0].OneofWrappers = []any{}
	file_poll_proto_msgTypes[2].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_poll_proto_rawDesc), len(file_poll_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_poll_proto_goTypes,
		DependencyIndexes: file_poll_proto_depIdxs,
		MessageInfos:      file_poll_proto_msgTypes,
	}.Build()
	File_poll_proto = out.File
	file_poll_proto_goTypes = nil
	file_poll_proto_depIdxs = nil
}
