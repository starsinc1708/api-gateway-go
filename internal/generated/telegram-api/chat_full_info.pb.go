// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: chat_full_info.proto

package telegram_api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ChatFullInfo struct {
	state                              protoimpl.MessageState `protogen:"open.v1"`
	Id                                 int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Type                               string                 `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Title                              *string                `protobuf:"bytes,3,opt,name=title,proto3,oneof" json:"title,omitempty"`
	Username                           *string                `protobuf:"bytes,4,opt,name=username,proto3,oneof" json:"username,omitempty"`
	FirstName                          *string                `protobuf:"bytes,5,opt,name=first_name,json=firstName,proto3,oneof" json:"first_name,omitempty"`
	LastName                           *string                `protobuf:"bytes,6,opt,name=last_name,json=lastName,proto3,oneof" json:"last_name,omitempty"`
	IsForum                            *bool                  `protobuf:"varint,7,opt,name=is_forum,json=isForum,proto3,oneof" json:"is_forum,omitempty"`
	AccentColorId                      int64                  `protobuf:"varint,8,opt,name=accent_color_id,json=accentColorId,proto3" json:"accent_color_id,omitempty"`
	MaxReactionCount                   int32                  `protobuf:"varint,9,opt,name=max_reaction_count,json=maxReactionCount,proto3" json:"max_reaction_count,omitempty"`
	Photo                              *ChatPhoto             `protobuf:"bytes,10,opt,name=photo,proto3,oneof" json:"photo,omitempty"`
	ActiveUsernames                    []string               `protobuf:"bytes,11,rep,name=active_usernames,json=activeUsernames,proto3" json:"active_usernames,omitempty"`
	Birthdate                          *Birthdate             `protobuf:"bytes,12,opt,name=birthdate,proto3,oneof" json:"birthdate,omitempty"`
	BusinessIntro                      *BusinessIntro         `protobuf:"bytes,13,opt,name=business_intro,json=businessIntro,proto3,oneof" json:"business_intro,omitempty"`
	BusinessLocation                   *BusinessLocation      `protobuf:"bytes,14,opt,name=business_location,json=businessLocation,proto3,oneof" json:"business_location,omitempty"`
	BusinessOpeningHours               *BusinessOpeningHours  `protobuf:"bytes,15,opt,name=business_opening_hours,json=businessOpeningHours,proto3,oneof" json:"business_opening_hours,omitempty"`
	PersonalChat                       *Chat                  `protobuf:"bytes,16,opt,name=personal_chat,json=personalChat,proto3,oneof" json:"personal_chat,omitempty"`
	AvailableReactions                 []*ReactionType        `protobuf:"bytes,17,rep,name=available_reactions,json=availableReactions,proto3" json:"available_reactions,omitempty"`
	BackgroundCustomEmojiId            *string                `protobuf:"bytes,18,opt,name=background_custom_emoji_id,json=backgroundCustomEmojiId,proto3,oneof" json:"background_custom_emoji_id,omitempty"`
	ProfileAccentColorId               *int64                 `protobuf:"varint,19,opt,name=profile_accent_color_id,json=profileAccentColorId,proto3,oneof" json:"profile_accent_color_id,omitempty"`
	ProfileBackgroundCustomEmojiId     *string                `protobuf:"bytes,20,opt,name=profile_background_custom_emoji_id,json=profileBackgroundCustomEmojiId,proto3,oneof" json:"profile_background_custom_emoji_id,omitempty"`
	EmojiStatusCustomEmojiId           *string                `protobuf:"bytes,21,opt,name=emoji_status_custom_emoji_id,json=emojiStatusCustomEmojiId,proto3,oneof" json:"emoji_status_custom_emoji_id,omitempty"`
	EmojiStatusExpirationDate          *string                `protobuf:"bytes,22,opt,name=emoji_status_expiration_date,json=emojiStatusExpirationDate,proto3,oneof" json:"emoji_status_expiration_date,omitempty"`
	Bio                                *string                `protobuf:"bytes,23,opt,name=bio,proto3,oneof" json:"bio,omitempty"`
	HasPrivateForwards                 *bool                  `protobuf:"varint,24,opt,name=has_private_forwards,json=hasPrivateForwards,proto3,oneof" json:"has_private_forwards,omitempty"`
	HasRestrictedVoiceAndVideoMessages *bool                  `protobuf:"varint,25,opt,name=has_restricted_voice_and_video_messages,json=hasRestrictedVoiceAndVideoMessages,proto3,oneof" json:"has_restricted_voice_and_video_messages,omitempty"`
	JoinToSendMessages                 *bool                  `protobuf:"varint,26,opt,name=join_to_send_messages,json=joinToSendMessages,proto3,oneof" json:"join_to_send_messages,omitempty"`
	JoinByRequest                      *bool                  `protobuf:"varint,27,opt,name=join_by_request,json=joinByRequest,proto3,oneof" json:"join_by_request,omitempty"`
	Description                        *string                `protobuf:"bytes,28,opt,name=description,proto3,oneof" json:"description,omitempty"`
	InviteLink                         *string                `protobuf:"bytes,29,opt,name=invite_link,json=inviteLink,proto3,oneof" json:"invite_link,omitempty"`
	PinnedMessage                      *Message               `protobuf:"bytes,30,opt,name=pinned_message,json=pinnedMessage,proto3,oneof" json:"pinned_message,omitempty"`
	Permissions                        *ChatPermissions       `protobuf:"bytes,31,opt,name=permissions,proto3,oneof" json:"permissions,omitempty"`
	CanSendGift                        *bool                  `protobuf:"varint,32,opt,name=can_send_gift,json=canSendGift,proto3,oneof" json:"can_send_gift,omitempty"`
	CanSendPaidMedia                   *bool                  `protobuf:"varint,33,opt,name=can_send_paid_media,json=canSendPaidMedia,proto3,oneof" json:"can_send_paid_media,omitempty"`
	SlowModeDelay                      *int32                 `protobuf:"varint,34,opt,name=slow_mode_delay,json=slowModeDelay,proto3,oneof" json:"slow_mode_delay,omitempty"`
	UnrestrictBoostCount               *int32                 `protobuf:"varint,35,opt,name=unrestrict_boost_count,json=unrestrictBoostCount,proto3,oneof" json:"unrestrict_boost_count,omitempty"`
	MessageAutoDeleteTime              *int32                 `protobuf:"varint,36,opt,name=message_auto_delete_time,json=messageAutoDeleteTime,proto3,oneof" json:"message_auto_delete_time,omitempty"`
	HasAggressiveAntiSpamEnabled       *bool                  `protobuf:"varint,37,opt,name=has_aggressive_anti_spam_enabled,json=hasAggressiveAntiSpamEnabled,proto3,oneof" json:"has_aggressive_anti_spam_enabled,omitempty"`
	HasHiddenMembers                   *bool                  `protobuf:"varint,38,opt,name=has_hidden_members,json=hasHiddenMembers,proto3,oneof" json:"has_hidden_members,omitempty"`
	HasProtectedContent                *bool                  `protobuf:"varint,39,opt,name=has_protected_content,json=hasProtectedContent,proto3,oneof" json:"has_protected_content,omitempty"`
	HasVisibleHistory                  *bool                  `protobuf:"varint,40,opt,name=has_visible_history,json=hasVisibleHistory,proto3,oneof" json:"has_visible_history,omitempty"`
	StickerSetName                     *string                `protobuf:"bytes,41,opt,name=sticker_set_name,json=stickerSetName,proto3,oneof" json:"sticker_set_name,omitempty"`
	CanSetStickerSet                   *bool                  `protobuf:"varint,42,opt,name=can_set_sticker_set,json=canSetStickerSet,proto3,oneof" json:"can_set_sticker_set,omitempty"`
	CustomEmojiStickerSetName          *string                `protobuf:"bytes,43,opt,name=custom_emoji_sticker_set_name,json=customEmojiStickerSetName,proto3,oneof" json:"custom_emoji_sticker_set_name,omitempty"`
	LinkedChatId                       *int64                 `protobuf:"varint,44,opt,name=linked_chat_id,json=linkedChatId,proto3,oneof" json:"linked_chat_id,omitempty"`
	unknownFields                      protoimpl.UnknownFields
	sizeCache                          protoimpl.SizeCache
}

func (x *ChatFullInfo) Reset() {
	*x = ChatFullInfo{}
	mi := &file_chat_full_info_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatFullInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatFullInfo) ProtoMessage() {}

func (x *ChatFullInfo) ProtoReflect() protoreflect.Message {
	mi := &file_chat_full_info_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatFullInfo.ProtoReflect.Descriptor instead.
func (*ChatFullInfo) Descriptor() ([]byte, []int) {
	return file_chat_full_info_proto_rawDescGZIP(), []int{0}
}

func (x *ChatFullInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ChatFullInfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ChatFullInfo) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *ChatFullInfo) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *ChatFullInfo) GetFirstName() string {
	if x != nil && x.FirstName != nil {
		return *x.FirstName
	}
	return ""
}

func (x *ChatFullInfo) GetLastName() string {
	if x != nil && x.LastName != nil {
		return *x.LastName
	}
	return ""
}

func (x *ChatFullInfo) GetIsForum() bool {
	if x != nil && x.IsForum != nil {
		return *x.IsForum
	}
	return false
}

func (x *ChatFullInfo) GetAccentColorId() int64 {
	if x != nil {
		return x.AccentColorId
	}
	return 0
}

func (x *ChatFullInfo) GetMaxReactionCount() int32 {
	if x != nil {
		return x.MaxReactionCount
	}
	return 0
}

func (x *ChatFullInfo) GetPhoto() *ChatPhoto {
	if x != nil {
		return x.Photo
	}
	return nil
}

func (x *ChatFullInfo) GetActiveUsernames() []string {
	if x != nil {
		return x.ActiveUsernames
	}
	return nil
}

func (x *ChatFullInfo) GetBirthdate() *Birthdate {
	if x != nil {
		return x.Birthdate
	}
	return nil
}

func (x *ChatFullInfo) GetBusinessIntro() *BusinessIntro {
	if x != nil {
		return x.BusinessIntro
	}
	return nil
}

func (x *ChatFullInfo) GetBusinessLocation() *BusinessLocation {
	if x != nil {
		return x.BusinessLocation
	}
	return nil
}

func (x *ChatFullInfo) GetBusinessOpeningHours() *BusinessOpeningHours {
	if x != nil {
		return x.BusinessOpeningHours
	}
	return nil
}

func (x *ChatFullInfo) GetPersonalChat() *Chat {
	if x != nil {
		return x.PersonalChat
	}
	return nil
}

func (x *ChatFullInfo) GetAvailableReactions() []*ReactionType {
	if x != nil {
		return x.AvailableReactions
	}
	return nil
}

func (x *ChatFullInfo) GetBackgroundCustomEmojiId() string {
	if x != nil && x.BackgroundCustomEmojiId != nil {
		return *x.BackgroundCustomEmojiId
	}
	return ""
}

func (x *ChatFullInfo) GetProfileAccentColorId() int64 {
	if x != nil && x.ProfileAccentColorId != nil {
		return *x.ProfileAccentColorId
	}
	return 0
}

func (x *ChatFullInfo) GetProfileBackgroundCustomEmojiId() string {
	if x != nil && x.ProfileBackgroundCustomEmojiId != nil {
		return *x.ProfileBackgroundCustomEmojiId
	}
	return ""
}

func (x *ChatFullInfo) GetEmojiStatusCustomEmojiId() string {
	if x != nil && x.EmojiStatusCustomEmojiId != nil {
		return *x.EmojiStatusCustomEmojiId
	}
	return ""
}

func (x *ChatFullInfo) GetEmojiStatusExpirationDate() string {
	if x != nil && x.EmojiStatusExpirationDate != nil {
		return *x.EmojiStatusExpirationDate
	}
	return ""
}

func (x *ChatFullInfo) GetBio() string {
	if x != nil && x.Bio != nil {
		return *x.Bio
	}
	return ""
}

func (x *ChatFullInfo) GetHasPrivateForwards() bool {
	if x != nil && x.HasPrivateForwards != nil {
		return *x.HasPrivateForwards
	}
	return false
}

func (x *ChatFullInfo) GetHasRestrictedVoiceAndVideoMessages() bool {
	if x != nil && x.HasRestrictedVoiceAndVideoMessages != nil {
		return *x.HasRestrictedVoiceAndVideoMessages
	}
	return false
}

func (x *ChatFullInfo) GetJoinToSendMessages() bool {
	if x != nil && x.JoinToSendMessages != nil {
		return *x.JoinToSendMessages
	}
	return false
}

func (x *ChatFullInfo) GetJoinByRequest() bool {
	if x != nil && x.JoinByRequest != nil {
		return *x.JoinByRequest
	}
	return false
}

func (x *ChatFullInfo) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *ChatFullInfo) GetInviteLink() string {
	if x != nil && x.InviteLink != nil {
		return *x.InviteLink
	}
	return ""
}

func (x *ChatFullInfo) GetPinnedMessage() *Message {
	if x != nil {
		return x.PinnedMessage
	}
	return nil
}

func (x *ChatFullInfo) GetPermissions() *ChatPermissions {
	if x != nil {
		return x.Permissions
	}
	return nil
}

func (x *ChatFullInfo) GetCanSendGift() bool {
	if x != nil && x.CanSendGift != nil {
		return *x.CanSendGift
	}
	return false
}

func (x *ChatFullInfo) GetCanSendPaidMedia() bool {
	if x != nil && x.CanSendPaidMedia != nil {
		return *x.CanSendPaidMedia
	}
	return false
}

func (x *ChatFullInfo) GetSlowModeDelay() int32 {
	if x != nil && x.SlowModeDelay != nil {
		return *x.SlowModeDelay
	}
	return 0
}

func (x *ChatFullInfo) GetUnrestrictBoostCount() int32 {
	if x != nil && x.UnrestrictBoostCount != nil {
		return *x.UnrestrictBoostCount
	}
	return 0
}

func (x *ChatFullInfo) GetMessageAutoDeleteTime() int32 {
	if x != nil && x.MessageAutoDeleteTime != nil {
		return *x.MessageAutoDeleteTime
	}
	return 0
}

func (x *ChatFullInfo) GetHasAggressiveAntiSpamEnabled() bool {
	if x != nil && x.HasAggressiveAntiSpamEnabled != nil {
		return *x.HasAggressiveAntiSpamEnabled
	}
	return false
}

func (x *ChatFullInfo) GetHasHiddenMembers() bool {
	if x != nil && x.HasHiddenMembers != nil {
		return *x.HasHiddenMembers
	}
	return false
}

func (x *ChatFullInfo) GetHasProtectedContent() bool {
	if x != nil && x.HasProtectedContent != nil {
		return *x.HasProtectedContent
	}
	return false
}

func (x *ChatFullInfo) GetHasVisibleHistory() bool {
	if x != nil && x.HasVisibleHistory != nil {
		return *x.HasVisibleHistory
	}
	return false
}

func (x *ChatFullInfo) GetStickerSetName() string {
	if x != nil && x.StickerSetName != nil {
		return *x.StickerSetName
	}
	return ""
}

func (x *ChatFullInfo) GetCanSetStickerSet() bool {
	if x != nil && x.CanSetStickerSet != nil {
		return *x.CanSetStickerSet
	}
	return false
}

func (x *ChatFullInfo) GetCustomEmojiStickerSetName() string {
	if x != nil && x.CustomEmojiStickerSetName != nil {
		return *x.CustomEmojiStickerSetName
	}
	return ""
}

func (x *ChatFullInfo) GetLinkedChatId() int64 {
	if x != nil && x.LinkedChatId != nil {
		return *x.LinkedChatId
	}
	return 0
}

var File_chat_full_info_proto protoreflect.FileDescriptor

var file_chat_full_info_proto_rawDesc = string([]byte{
	0x0a, 0x14, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x70, 0x68, 0x6f,
	0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64,
	0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb8, 0x18, 0x0a,
	0x0e, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x75,
	0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04, 0x52, 0x07, 0x69, 0x73, 0x46, 0x6f, 0x72,
	0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x6e, 0x74, 0x5f,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x61, 0x63, 0x63, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a,
	0x12, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x52, 0x65,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x05, 0x70,
	0x68, 0x6f, 0x74, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x63, 0x68, 0x61,
	0x74, 0x5f, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x48, 0x05, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x2d,
	0x0a, 0x09, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x74, 0x65, 0x48, 0x06, 0x52,
	0x09, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a,
	0x0e, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x5f, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x48, 0x07, 0x52, 0x0d, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x11, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x08, 0x52, 0x10, 0x62, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x52, 0x0a, 0x16, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x6f, 0x70, 0x65,
	0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6e, 0x67, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x48, 0x09, 0x52, 0x14, 0x62, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x48, 0x6f, 0x75, 0x72,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x0d, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c,
	0x5f, 0x63, 0x68, 0x61, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x48, 0x0a, 0x52, 0x0c, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x68,
	0x61, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x13, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x11, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x52, 0x12, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x40, 0x0a, 0x1a, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x65, 0x6d, 0x6f, 0x6a,
	0x69, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x17, 0x62, 0x61,
	0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x45, 0x6d,
	0x6f, 0x6a, 0x69, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x17, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x48, 0x0c, 0x52, 0x14, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x41, 0x63, 0x63, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a, 0x22, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x5f, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x0d, 0x52, 0x1e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x67,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x45, 0x6d, 0x6f, 0x6a, 0x69,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x1c, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x65, 0x6d, 0x6f,
	0x6a, 0x69, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x18, 0x65,
	0x6d, 0x6f, 0x6a, 0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x1c, 0x65, 0x6d,
	0x6f, 0x6a, 0x69, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x0f, 0x52, 0x19, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45,
	0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x15, 0x0a, 0x03, 0x62, 0x69, 0x6f, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52,
	0x03, 0x62, 0x69, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x68, 0x61, 0x73, 0x5f, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x08, 0x48, 0x11, 0x52, 0x12, 0x68, 0x61, 0x73, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x58,
	0x0a, 0x27, 0x68, 0x61, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64,
	0x5f, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x12, 0x52, 0x22, 0x68, 0x61, 0x73, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64,
	0x56, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x6e, 0x64, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x15, 0x6a, 0x6f, 0x69, 0x6e,
	0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x48, 0x13, 0x52, 0x12, 0x6a, 0x6f, 0x69, 0x6e, 0x54,
	0x6f, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x2b, 0x0a, 0x0f, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x62, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x48, 0x14, 0x52, 0x0d, 0x6a, 0x6f, 0x69,
	0x6e, 0x42, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x15, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x6c,
	0x69, 0x6e, 0x6b, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x16, 0x52, 0x0a, 0x69, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x0e, 0x70, 0x69,
	0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x08, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x17, 0x52, 0x0d,
	0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x38, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x70, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x18, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x63, 0x61,
	0x6e, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x19, 0x52, 0x0b, 0x63, 0x61, 0x6e, 0x53, 0x65, 0x6e, 0x64, 0x47, 0x69, 0x66, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x13, 0x63, 0x61, 0x6e, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f,
	0x70, 0x61, 0x69, 0x64, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x21, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x1a, 0x52, 0x10, 0x63, 0x61, 0x6e, 0x53, 0x65, 0x6e, 0x64, 0x50, 0x61, 0x69, 0x64, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x73, 0x6c, 0x6f, 0x77, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x22, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x1b, 0x52, 0x0d, 0x73, 0x6c, 0x6f, 0x77, 0x4d, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x6c, 0x61,
	0x79, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x16, 0x75, 0x6e, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x5f, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x23,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x1c, 0x52, 0x14, 0x75, 0x6e, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x3c, 0x0a, 0x18, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x1d, 0x52, 0x15, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x75, 0x74, 0x6f,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a,
	0x20, 0x68, 0x61, 0x73, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x76, 0x65, 0x5f,
	0x61, 0x6e, 0x74, 0x69, 0x5f, 0x73, 0x70, 0x61, 0x6d, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x25, 0x20, 0x01, 0x28, 0x08, 0x48, 0x1e, 0x52, 0x1c, 0x68, 0x61, 0x73, 0x41, 0x67,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x76, 0x65, 0x41, 0x6e, 0x74, 0x69, 0x53, 0x70, 0x61, 0x6d,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x68, 0x61,
	0x73, 0x5f, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x18, 0x26, 0x20, 0x01, 0x28, 0x08, 0x48, 0x1f, 0x52, 0x10, 0x68, 0x61, 0x73, 0x48, 0x69, 0x64,
	0x64, 0x65, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a,
	0x15, 0x68, 0x61, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x27, 0x20, 0x01, 0x28, 0x08, 0x48, 0x20, 0x52, 0x13,
	0x68, 0x61, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x68, 0x61, 0x73, 0x5f, 0x76, 0x69,
	0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x28, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x21, 0x52, 0x11, 0x68, 0x61, 0x73, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c,
	0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x73,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x29, 0x20, 0x01, 0x28, 0x09, 0x48, 0x22, 0x52, 0x0e, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x53, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x13, 0x63, 0x61,
	0x6e, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x73, 0x65,
	0x74, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x08, 0x48, 0x23, 0x52, 0x10, 0x63, 0x61, 0x6e, 0x53, 0x65,
	0x74, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x45,
	0x0a, 0x1d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x5f, 0x73,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x2b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x24, 0x52, 0x19, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x45,
	0x6d, 0x6f, 0x6a, 0x69, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x5f,
	0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x03, 0x48, 0x25, 0x52,
	0x0c, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x43, 0x68, 0x61, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x75,
	0x6d, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x74, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x42, 0x14, 0x0a, 0x12,
	0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f,
	0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x42,
	0x1d, 0x0a, 0x1b, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x5f, 0x69, 0x64, 0x42, 0x1a,
	0x0a, 0x18, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x6e,
	0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x25, 0x0a, 0x23, 0x5f, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x5f, 0x69,
	0x64, 0x42, 0x1f, 0x0a, 0x1d, 0x5f, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x5f,
	0x69, 0x64, 0x42, 0x1f, 0x0a, 0x1d, 0x5f, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x62, 0x69, 0x6f, 0x42, 0x17, 0x0a, 0x15, 0x5f,
	0x68, 0x61, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x42, 0x2a, 0x0a, 0x28, 0x5f, 0x68, 0x61, 0x73, 0x5f, 0x72, 0x65, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x6e,
	0x64, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x42, 0x18, 0x0a, 0x16, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x65, 0x6e,
	0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6a,
	0x6f, 0x69, 0x6e, 0x5f, 0x62, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x61, 0x6e, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x67,
	0x69, 0x66, 0x74, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x63, 0x61, 0x6e, 0x5f, 0x73, 0x65, 0x6e, 0x64,
	0x5f, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x42, 0x12, 0x0a, 0x10, 0x5f,
	0x73, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x42,
	0x19, 0x0a, 0x17, 0x5f, 0x75, 0x6e, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x5f, 0x62,
	0x6f, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x23, 0x0a, 0x21, 0x5f, 0x68, 0x61, 0x73, 0x5f,
	0x61, 0x67, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x6e, 0x74, 0x69, 0x5f,
	0x73, 0x70, 0x61, 0x6d, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x15, 0x0a, 0x13,
	0x5f, 0x68, 0x61, 0x73, 0x5f, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x5f, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x68, 0x61, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x16, 0x0a,
	0x14, 0x5f, 0x68, 0x61, 0x73, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x68, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x72, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x63,
	0x61, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x73,
	0x65, 0x74, 0x42, 0x20, 0x0a, 0x1e, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x65, 0x6d,
	0x6f, 0x6a, 0x69, 0x5f, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x5f,
	0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x18, 0x5a, 0x16, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x64, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x2d, 0x61, 0x70,
	0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_chat_full_info_proto_rawDescOnce sync.Once
	file_chat_full_info_proto_rawDescData []byte
)

func file_chat_full_info_proto_rawDescGZIP() []byte {
	file_chat_full_info_proto_rawDescOnce.Do(func() {
		file_chat_full_info_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_chat_full_info_proto_rawDesc), len(file_chat_full_info_proto_rawDesc)))
	})
	return file_chat_full_info_proto_rawDescData
}

var file_chat_full_info_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_chat_full_info_proto_goTypes = []any{
	(*ChatFullInfo)(nil),         // 0: chat_full_info
	(*ChatPhoto)(nil),            // 1: chat_photo
	(*Birthdate)(nil),            // 2: birthdate
	(*BusinessIntro)(nil),        // 3: business_intro
	(*BusinessLocation)(nil),     // 4: business_location
	(*BusinessOpeningHours)(nil), // 5: business_opening_hours
	(*Chat)(nil),                 // 6: chat
	(*ReactionType)(nil),         // 7: reaction_type
	(*Message)(nil),              // 8: message
	(*ChatPermissions)(nil),      // 9: chat_permissions
}
var file_chat_full_info_proto_depIdxs = []int32{
	1, // 0: chat_full_info.photo:type_name -> chat_photo
	2, // 1: chat_full_info.birthdate:type_name -> birthdate
	3, // 2: chat_full_info.business_intro:type_name -> business_intro
	4, // 3: chat_full_info.business_location:type_name -> business_location
	5, // 4: chat_full_info.business_opening_hours:type_name -> business_opening_hours
	6, // 5: chat_full_info.personal_chat:type_name -> chat
	7, // 6: chat_full_info.available_reactions:type_name -> reaction_type
	8, // 7: chat_full_info.pinned_message:type_name -> message
	9, // 8: chat_full_info.permissions:type_name -> chat_permissions
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_chat_full_info_proto_init() }
func file_chat_full_info_proto_init() {
	if File_chat_full_info_proto != nil {
		return
	}
	file_chat_photo_proto_init()
	file_birthdate_proto_init()
	file_business_proto_init()
	file_chat_proto_init()
	file_reaction_proto_init()
	file_message_proto_init()
	file_chat_permissions_proto_init()
	file_chat_full_info_proto_msgTypes[0].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_chat_full_info_proto_rawDesc), len(file_chat_full_info_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chat_full_info_proto_goTypes,
		DependencyIndexes: file_chat_full_info_proto_depIdxs,
		MessageInfos:      file_chat_full_info_proto_msgTypes,
	}.Build()
	File_chat_full_info_proto = out.File
	file_chat_full_info_proto_goTypes = nil
	file_chat_full_info_proto_depIdxs = nil
}
