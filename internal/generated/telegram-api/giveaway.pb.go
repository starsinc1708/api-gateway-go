// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: giveaway.proto

package telegram_api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Giveaway struct {
	state                         protoimpl.MessageState `protogen:"open.v1"`
	Chats                         []*Chat                `protobuf:"bytes,1,rep,name=chats,proto3" json:"chats,omitempty"`
	WinnersSelectionDate          uint32                 `protobuf:"varint,2,opt,name=winners_selection_date,json=winnersSelectionDate,proto3" json:"winners_selection_date,omitempty"`
	WinnerCount                   uint32                 `protobuf:"varint,3,opt,name=winner_count,json=winnerCount,proto3" json:"winner_count,omitempty"`
	OnlyNewMembers                *bool                  `protobuf:"varint,4,opt,name=only_new_members,json=onlyNewMembers,proto3,oneof" json:"only_new_members,omitempty"`
	HasPublicWinners              *bool                  `protobuf:"varint,5,opt,name=has_public_winners,json=hasPublicWinners,proto3,oneof" json:"has_public_winners,omitempty"`
	PrizeDescription              *string                `protobuf:"bytes,6,opt,name=prize_description,json=prizeDescription,proto3,oneof" json:"prize_description,omitempty"`
	CountryCodes                  []string               `protobuf:"bytes,7,rep,name=country_codes,json=countryCodes,proto3" json:"country_codes,omitempty"`
	PrizeStarCount                *uint32                `protobuf:"varint,8,opt,name=prize_star_count,json=prizeStarCount,proto3,oneof" json:"prize_star_count,omitempty"`
	PremiumSubscriptionMonthCount *uint32                `protobuf:"varint,9,opt,name=premium_subscription_month_count,json=premiumSubscriptionMonthCount,proto3,oneof" json:"premium_subscription_month_count,omitempty"`
	unknownFields                 protoimpl.UnknownFields
	sizeCache                     protoimpl.SizeCache
}

func (x *Giveaway) Reset() {
	*x = Giveaway{}
	mi := &file_giveaway_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Giveaway) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Giveaway) ProtoMessage() {}

func (x *Giveaway) ProtoReflect() protoreflect.Message {
	mi := &file_giveaway_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Giveaway.ProtoReflect.Descriptor instead.
func (*Giveaway) Descriptor() ([]byte, []int) {
	return file_giveaway_proto_rawDescGZIP(), []int{0}
}

func (x *Giveaway) GetChats() []*Chat {
	if x != nil {
		return x.Chats
	}
	return nil
}

func (x *Giveaway) GetWinnersSelectionDate() uint32 {
	if x != nil {
		return x.WinnersSelectionDate
	}
	return 0
}

func (x *Giveaway) GetWinnerCount() uint32 {
	if x != nil {
		return x.WinnerCount
	}
	return 0
}

func (x *Giveaway) GetOnlyNewMembers() bool {
	if x != nil && x.OnlyNewMembers != nil {
		return *x.OnlyNewMembers
	}
	return false
}

func (x *Giveaway) GetHasPublicWinners() bool {
	if x != nil && x.HasPublicWinners != nil {
		return *x.HasPublicWinners
	}
	return false
}

func (x *Giveaway) GetPrizeDescription() string {
	if x != nil && x.PrizeDescription != nil {
		return *x.PrizeDescription
	}
	return ""
}

func (x *Giveaway) GetCountryCodes() []string {
	if x != nil {
		return x.CountryCodes
	}
	return nil
}

func (x *Giveaway) GetPrizeStarCount() uint32 {
	if x != nil && x.PrizeStarCount != nil {
		return *x.PrizeStarCount
	}
	return 0
}

func (x *Giveaway) GetPremiumSubscriptionMonthCount() uint32 {
	if x != nil && x.PremiumSubscriptionMonthCount != nil {
		return *x.PremiumSubscriptionMonthCount
	}
	return 0
}

type GiveawayCreated struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	PrizeStarCount *int32                 `protobuf:"varint,1,opt,name=prize_star_count,json=prizeStarCount,proto3,oneof" json:"prize_star_count,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GiveawayCreated) Reset() {
	*x = GiveawayCreated{}
	mi := &file_giveaway_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GiveawayCreated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GiveawayCreated) ProtoMessage() {}

func (x *GiveawayCreated) ProtoReflect() protoreflect.Message {
	mi := &file_giveaway_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GiveawayCreated.ProtoReflect.Descriptor instead.
func (*GiveawayCreated) Descriptor() ([]byte, []int) {
	return file_giveaway_proto_rawDescGZIP(), []int{1}
}

func (x *GiveawayCreated) GetPrizeStarCount() int32 {
	if x != nil && x.PrizeStarCount != nil {
		return *x.PrizeStarCount
	}
	return 0
}

type GiveawayWinners struct {
	state                         protoimpl.MessageState `protogen:"open.v1"`
	Chat                          *Chat                  `protobuf:"bytes,1,opt,name=chat,proto3" json:"chat,omitempty"`
	GiveawayMessageId             int64                  `protobuf:"varint,2,opt,name=giveaway_message_id,json=giveawayMessageId,proto3" json:"giveaway_message_id,omitempty"`
	WinnersSelectionDate          int64                  `protobuf:"varint,3,opt,name=winners_selection_date,json=winnersSelectionDate,proto3" json:"winners_selection_date,omitempty"`
	WinnerCount                   int32                  `protobuf:"varint,4,opt,name=winner_count,json=winnerCount,proto3" json:"winner_count,omitempty"`
	Winners                       []*User                `protobuf:"bytes,5,rep,name=winners,proto3" json:"winners,omitempty"`
	AdditionalChatCount           *int32                 `protobuf:"varint,6,opt,name=additional_chat_count,json=additionalChatCount,proto3,oneof" json:"additional_chat_count,omitempty"`
	PrizeStarCount                *int32                 `protobuf:"varint,7,opt,name=prize_star_count,json=prizeStarCount,proto3,oneof" json:"prize_star_count,omitempty"`
	PremiumSubscriptionMonthCount *int32                 `protobuf:"varint,8,opt,name=premium_subscription_month_count,json=premiumSubscriptionMonthCount,proto3,oneof" json:"premium_subscription_month_count,omitempty"`
	UnclaimedPrizeCount           *int32                 `protobuf:"varint,9,opt,name=unclaimed_prize_count,json=unclaimedPrizeCount,proto3,oneof" json:"unclaimed_prize_count,omitempty"`
	OnlyNewMembers                *bool                  `protobuf:"varint,10,opt,name=only_new_members,json=onlyNewMembers,proto3,oneof" json:"only_new_members,omitempty"`
	WasRefunded                   *bool                  `protobuf:"varint,11,opt,name=was_refunded,json=wasRefunded,proto3,oneof" json:"was_refunded,omitempty"`
	PrizeDescription              *string                `protobuf:"bytes,12,opt,name=prize_description,json=prizeDescription,proto3,oneof" json:"prize_description,omitempty"`
	unknownFields                 protoimpl.UnknownFields
	sizeCache                     protoimpl.SizeCache
}

func (x *GiveawayWinners) Reset() {
	*x = GiveawayWinners{}
	mi := &file_giveaway_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GiveawayWinners) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GiveawayWinners) ProtoMessage() {}

func (x *GiveawayWinners) ProtoReflect() protoreflect.Message {
	mi := &file_giveaway_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GiveawayWinners.ProtoReflect.Descriptor instead.
func (*GiveawayWinners) Descriptor() ([]byte, []int) {
	return file_giveaway_proto_rawDescGZIP(), []int{2}
}

func (x *GiveawayWinners) GetChat() *Chat {
	if x != nil {
		return x.Chat
	}
	return nil
}

func (x *GiveawayWinners) GetGiveawayMessageId() int64 {
	if x != nil {
		return x.GiveawayMessageId
	}
	return 0
}

func (x *GiveawayWinners) GetWinnersSelectionDate() int64 {
	if x != nil {
		return x.WinnersSelectionDate
	}
	return 0
}

func (x *GiveawayWinners) GetWinnerCount() int32 {
	if x != nil {
		return x.WinnerCount
	}
	return 0
}

func (x *GiveawayWinners) GetWinners() []*User {
	if x != nil {
		return x.Winners
	}
	return nil
}

func (x *GiveawayWinners) GetAdditionalChatCount() int32 {
	if x != nil && x.AdditionalChatCount != nil {
		return *x.AdditionalChatCount
	}
	return 0
}

func (x *GiveawayWinners) GetPrizeStarCount() int32 {
	if x != nil && x.PrizeStarCount != nil {
		return *x.PrizeStarCount
	}
	return 0
}

func (x *GiveawayWinners) GetPremiumSubscriptionMonthCount() int32 {
	if x != nil && x.PremiumSubscriptionMonthCount != nil {
		return *x.PremiumSubscriptionMonthCount
	}
	return 0
}

func (x *GiveawayWinners) GetUnclaimedPrizeCount() int32 {
	if x != nil && x.UnclaimedPrizeCount != nil {
		return *x.UnclaimedPrizeCount
	}
	return 0
}

func (x *GiveawayWinners) GetOnlyNewMembers() bool {
	if x != nil && x.OnlyNewMembers != nil {
		return *x.OnlyNewMembers
	}
	return false
}

func (x *GiveawayWinners) GetWasRefunded() bool {
	if x != nil && x.WasRefunded != nil {
		return *x.WasRefunded
	}
	return false
}

func (x *GiveawayWinners) GetPrizeDescription() string {
	if x != nil && x.PrizeDescription != nil {
		return *x.PrizeDescription
	}
	return ""
}

var File_giveaway_proto protoreflect.FileDescriptor

var file_giveaway_proto_rawDesc = string([]byte{
	0x0a, 0x0e, 0x67, 0x69, 0x76, 0x65, 0x61, 0x77, 0x61, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x0a, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb2, 0x04, 0x0a, 0x08, 0x67, 0x69, 0x76,
	0x65, 0x61, 0x77, 0x61, 0x79, 0x12, 0x1b, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x52, 0x05, 0x63, 0x68, 0x61,
	0x74, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x5f, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x14, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x69, 0x6e, 0x6e,
	0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x10, 0x6f,
	0x6e, 0x6c, 0x79, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0e, 0x6f, 0x6e, 0x6c, 0x79, 0x4e, 0x65, 0x77,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x68, 0x61,
	0x73, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x10, 0x68, 0x61, 0x73, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x57, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a,
	0x11, 0x70, 0x72, 0x69, 0x7a, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x10, 0x70, 0x72, 0x69, 0x7a,
	0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x10, 0x70, 0x72, 0x69, 0x7a, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x03,
	0x52, 0x0e, 0x70, 0x72, 0x69, 0x7a, 0x65, 0x53, 0x74, 0x61, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x4c, 0x0a, 0x20, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x5f, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x6e, 0x74,
	0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x04, 0x52,
	0x1d, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x68, 0x61, 0x73, 0x5f, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x42, 0x14, 0x0a,
	0x12, 0x5f, 0x70, 0x72, 0x69, 0x7a, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x70, 0x72, 0x69, 0x7a, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x23, 0x0a, 0x21, 0x5f, 0x70, 0x72, 0x65,
	0x6d, 0x69, 0x75, 0x6d, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x56, 0x0a,
	0x10, 0x67, 0x69, 0x76, 0x65, 0x61, 0x77, 0x61, 0x79, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x2d, 0x0a, 0x10, 0x70, 0x72, 0x69, 0x7a, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0e, 0x70,
	0x72, 0x69, 0x7a, 0x65, 0x53, 0x74, 0x61, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x42, 0x13, 0x0a, 0x11, 0x5f, 0x70, 0x72, 0x69, 0x7a, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xf9, 0x05, 0x0a, 0x10, 0x67, 0x69, 0x76, 0x65, 0x61, 0x77,
	0x61, 0x79, 0x5f, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x19, 0x0a, 0x04, 0x63, 0x68,
	0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x52,
	0x04, 0x63, 0x68, 0x61, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x67, 0x69, 0x76, 0x65, 0x61, 0x77, 0x61,
	0x79, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x11, 0x67, 0x69, 0x76, 0x65, 0x61, 0x77, 0x61, 0x79, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x73,
	0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x77,
	0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f,
	0x0a, 0x07, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x05, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x52, 0x07, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x12,
	0x37, 0x0a, 0x15, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x68,
	0x61, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00,
	0x52, 0x13, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x70, 0x72, 0x69, 0x7a,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x01, 0x52, 0x0e, 0x70, 0x72, 0x69, 0x7a, 0x65, 0x53, 0x74, 0x61, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4c, 0x0a, 0x20, 0x70, 0x72, 0x65, 0x6d, 0x69,
	0x75, 0x6d, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x02, 0x52, 0x1d, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x15, 0x75, 0x6e, 0x63, 0x6c, 0x61, 0x69, 0x6d,
	0x65, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x7a, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x13, 0x75, 0x6e, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65,
	0x64, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2d,
	0x0a, 0x10, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04, 0x52, 0x0e, 0x6f, 0x6e, 0x6c, 0x79,
	0x4e, 0x65, 0x77, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a,
	0x0c, 0x77, 0x61, 0x73, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x05, 0x52, 0x0b, 0x77, 0x61, 0x73, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x70, 0x72, 0x69, 0x7a, 0x65, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x06, 0x52, 0x10, 0x70, 0x72, 0x69, 0x7a, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x61, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x70, 0x72, 0x69, 0x7a, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x23, 0x0a, 0x21, 0x5f, 0x70, 0x72, 0x65, 0x6d, 0x69,
	0x75, 0x6d, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x18, 0x0a, 0x16, 0x5f,
	0x75, 0x6e, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x7a, 0x65, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x6e,
	0x65, 0x77, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x77,
	0x61, 0x73, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x42, 0x14, 0x0a, 0x12, 0x5f,
	0x70, 0x72, 0x69, 0x7a, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x18, 0x5a, 0x16, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2f, 0x74,
	0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x2d, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
})

var (
	file_giveaway_proto_rawDescOnce sync.Once
	file_giveaway_proto_rawDescData []byte
)

func file_giveaway_proto_rawDescGZIP() []byte {
	file_giveaway_proto_rawDescOnce.Do(func() {
		file_giveaway_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_giveaway_proto_rawDesc), len(file_giveaway_proto_rawDesc)))
	})
	return file_giveaway_proto_rawDescData
}

var file_giveaway_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_giveaway_proto_goTypes = []any{
	(*Giveaway)(nil),        // 0: giveaway
	(*GiveawayCreated)(nil), // 1: giveaway_created
	(*GiveawayWinners)(nil), // 2: giveaway_winners
	(*Chat)(nil),            // 3: chat
	(*User)(nil),            // 4: user
}
var file_giveaway_proto_depIdxs = []int32{
	3, // 0: giveaway.chats:type_name -> chat
	3, // 1: giveaway_winners.chat:type_name -> chat
	4, // 2: giveaway_winners.winners:type_name -> user
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_giveaway_proto_init() }
func file_giveaway_proto_init() {
	if File_giveaway_proto != nil {
		return
	}
	file_chat_proto_init()
	file_user_proto_init()
	file_giveaway_proto_msgTypes[0].OneofWrappers = []any{}
	file_giveaway_proto_msgTypes[1].OneofWrappers = []any{}
	file_giveaway_proto_msgTypes[2].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_giveaway_proto_rawDesc), len(file_giveaway_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_giveaway_proto_goTypes,
		DependencyIndexes: file_giveaway_proto_depIdxs,
		MessageInfos:      file_giveaway_proto_msgTypes,
	}.Build()
	File_giveaway_proto = out.File
	file_giveaway_proto_goTypes = nil
	file_giveaway_proto_depIdxs = nil
}
