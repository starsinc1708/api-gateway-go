// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: media.proto

package telegram_api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Animation struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FileId        string                 `protobuf:"bytes,1,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	FileUniqueId  string                 `protobuf:"bytes,2,opt,name=file_unique_id,json=fileUniqueId,proto3" json:"file_unique_id,omitempty"`
	Width         int32                  `protobuf:"zigzag32,3,opt,name=width,proto3" json:"width,omitempty"`
	Height        int32                  `protobuf:"zigzag32,4,opt,name=height,proto3" json:"height,omitempty"`
	Duration      int32                  `protobuf:"zigzag32,5,opt,name=duration,proto3" json:"duration,omitempty"`
	Thumbnail     *PhotoSize             `protobuf:"bytes,6,opt,name=thumbnail,proto3,oneof" json:"thumbnail,omitempty"`
	FileName      *string                `protobuf:"bytes,7,opt,name=file_name,json=fileName,proto3,oneof" json:"file_name,omitempty"`
	MimeType      *string                `protobuf:"bytes,8,opt,name=mime_type,json=mimeType,proto3,oneof" json:"mime_type,omitempty"`
	FileSize      *int32                 `protobuf:"zigzag32,9,opt,name=file_size,json=fileSize,proto3,oneof" json:"file_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Animation) Reset() {
	*x = Animation{}
	mi := &file_media_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Animation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Animation) ProtoMessage() {}

func (x *Animation) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Animation.ProtoReflect.Descriptor instead.
func (*Animation) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{0}
}

func (x *Animation) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

func (x *Animation) GetFileUniqueId() string {
	if x != nil {
		return x.FileUniqueId
	}
	return ""
}

func (x *Animation) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *Animation) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *Animation) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *Animation) GetThumbnail() *PhotoSize {
	if x != nil {
		return x.Thumbnail
	}
	return nil
}

func (x *Animation) GetFileName() string {
	if x != nil && x.FileName != nil {
		return *x.FileName
	}
	return ""
}

func (x *Animation) GetMimeType() string {
	if x != nil && x.MimeType != nil {
		return *x.MimeType
	}
	return ""
}

func (x *Animation) GetFileSize() int32 {
	if x != nil && x.FileSize != nil {
		return *x.FileSize
	}
	return 0
}

type Audio struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FileId        string                 `protobuf:"bytes,1,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	FileUniqueId  string                 `protobuf:"bytes,2,opt,name=file_unique_id,json=fileUniqueId,proto3" json:"file_unique_id,omitempty"`
	Duration      int32                  `protobuf:"zigzag32,3,opt,name=duration,proto3" json:"duration,omitempty"`
	Performer     *string                `protobuf:"bytes,4,opt,name=performer,proto3,oneof" json:"performer,omitempty"`
	Title         *string                `protobuf:"bytes,5,opt,name=title,proto3,oneof" json:"title,omitempty"`
	FileName      *string                `protobuf:"bytes,6,opt,name=file_name,json=fileName,proto3,oneof" json:"file_name,omitempty"`
	MimeType      *string                `protobuf:"bytes,7,opt,name=mime_type,json=mimeType,proto3,oneof" json:"mime_type,omitempty"`
	FileSize      *int32                 `protobuf:"zigzag32,8,opt,name=file_size,json=fileSize,proto3,oneof" json:"file_size,omitempty"`
	Thumbnail     *PhotoSize             `protobuf:"bytes,9,opt,name=thumbnail,proto3,oneof" json:"thumbnail,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Audio) Reset() {
	*x = Audio{}
	mi := &file_media_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Audio) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Audio) ProtoMessage() {}

func (x *Audio) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Audio.ProtoReflect.Descriptor instead.
func (*Audio) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{1}
}

func (x *Audio) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

func (x *Audio) GetFileUniqueId() string {
	if x != nil {
		return x.FileUniqueId
	}
	return ""
}

func (x *Audio) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *Audio) GetPerformer() string {
	if x != nil && x.Performer != nil {
		return *x.Performer
	}
	return ""
}

func (x *Audio) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *Audio) GetFileName() string {
	if x != nil && x.FileName != nil {
		return *x.FileName
	}
	return ""
}

func (x *Audio) GetMimeType() string {
	if x != nil && x.MimeType != nil {
		return *x.MimeType
	}
	return ""
}

func (x *Audio) GetFileSize() int32 {
	if x != nil && x.FileSize != nil {
		return *x.FileSize
	}
	return 0
}

func (x *Audio) GetThumbnail() *PhotoSize {
	if x != nil {
		return x.Thumbnail
	}
	return nil
}

type Document struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FileId        string                 `protobuf:"bytes,1,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	FileUniqueId  string                 `protobuf:"bytes,2,opt,name=file_unique_id,json=fileUniqueId,proto3" json:"file_unique_id,omitempty"`
	Thumbnail     *PhotoSize             `protobuf:"bytes,3,opt,name=thumbnail,proto3,oneof" json:"thumbnail,omitempty"`
	FileName      *string                `protobuf:"bytes,4,opt,name=file_name,json=fileName,proto3,oneof" json:"file_name,omitempty"`
	MimeType      *string                `protobuf:"bytes,5,opt,name=mime_type,json=mimeType,proto3,oneof" json:"mime_type,omitempty"`
	FileSize      *int32                 `protobuf:"zigzag32,6,opt,name=file_size,json=fileSize,proto3,oneof" json:"file_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Document) Reset() {
	*x = Document{}
	mi := &file_media_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Document) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Document) ProtoMessage() {}

func (x *Document) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Document.ProtoReflect.Descriptor instead.
func (*Document) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{2}
}

func (x *Document) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

func (x *Document) GetFileUniqueId() string {
	if x != nil {
		return x.FileUniqueId
	}
	return ""
}

func (x *Document) GetThumbnail() *PhotoSize {
	if x != nil {
		return x.Thumbnail
	}
	return nil
}

func (x *Document) GetFileName() string {
	if x != nil && x.FileName != nil {
		return *x.FileName
	}
	return ""
}

func (x *Document) GetMimeType() string {
	if x != nil && x.MimeType != nil {
		return *x.MimeType
	}
	return ""
}

func (x *Document) GetFileSize() int32 {
	if x != nil && x.FileSize != nil {
		return *x.FileSize
	}
	return 0
}

type File struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FileId        string                 `protobuf:"bytes,1,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	FileUniqueId  string                 `protobuf:"bytes,2,opt,name=file_unique_id,json=fileUniqueId,proto3" json:"file_unique_id,omitempty"`
	FileSize      *int32                 `protobuf:"varint,3,opt,name=file_size,json=fileSize,proto3,oneof" json:"file_size,omitempty"`
	FilePath      *string                `protobuf:"bytes,4,opt,name=file_path,json=filePath,proto3,oneof" json:"file_path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *File) Reset() {
	*x = File{}
	mi := &file_media_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *File) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*File) ProtoMessage() {}

func (x *File) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use File.ProtoReflect.Descriptor instead.
func (*File) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{3}
}

func (x *File) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

func (x *File) GetFileUniqueId() string {
	if x != nil {
		return x.FileUniqueId
	}
	return ""
}

func (x *File) GetFileSize() int32 {
	if x != nil && x.FileSize != nil {
		return *x.FileSize
	}
	return 0
}

func (x *File) GetFilePath() string {
	if x != nil && x.FilePath != nil {
		return *x.FilePath
	}
	return ""
}

type PhotoSize struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FileId        string                 `protobuf:"bytes,1,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	FileUniqueId  string                 `protobuf:"bytes,2,opt,name=file_unique_id,json=fileUniqueId,proto3" json:"file_unique_id,omitempty"`
	Width         int32                  `protobuf:"zigzag32,3,opt,name=width,proto3" json:"width,omitempty"`
	Height        int32                  `protobuf:"zigzag32,4,opt,name=height,proto3" json:"height,omitempty"`
	FileSize      *int32                 `protobuf:"zigzag32,5,opt,name=file_size,json=fileSize,proto3,oneof" json:"file_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PhotoSize) Reset() {
	*x = PhotoSize{}
	mi := &file_media_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PhotoSize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhotoSize) ProtoMessage() {}

func (x *PhotoSize) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhotoSize.ProtoReflect.Descriptor instead.
func (*PhotoSize) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{4}
}

func (x *PhotoSize) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

func (x *PhotoSize) GetFileUniqueId() string {
	if x != nil {
		return x.FileUniqueId
	}
	return ""
}

func (x *PhotoSize) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *PhotoSize) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *PhotoSize) GetFileSize() int32 {
	if x != nil && x.FileSize != nil {
		return *x.FileSize
	}
	return 0
}

type Sticker struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	FileId           string                 `protobuf:"bytes,1,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	FileUniqueId     string                 `protobuf:"bytes,2,opt,name=file_unique_id,json=fileUniqueId,proto3" json:"file_unique_id,omitempty"`
	Type             string                 `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Width            int32                  `protobuf:"varint,4,opt,name=width,proto3" json:"width,omitempty"`
	Height           int32                  `protobuf:"varint,5,opt,name=height,proto3" json:"height,omitempty"`
	IsAnimated       bool                   `protobuf:"varint,6,opt,name=is_animated,json=isAnimated,proto3" json:"is_animated,omitempty"`
	IsVideo          bool                   `protobuf:"varint,7,opt,name=is_video,json=isVideo,proto3" json:"is_video,omitempty"`
	Thumb            *PhotoSize             `protobuf:"bytes,8,opt,name=thumb,proto3,oneof" json:"thumb,omitempty"`
	Emoji            *string                `protobuf:"bytes,9,opt,name=emoji,proto3,oneof" json:"emoji,omitempty"`
	SetName          *string                `protobuf:"bytes,10,opt,name=set_name,json=setName,proto3,oneof" json:"set_name,omitempty"`
	PremiumAnimation *File                  `protobuf:"bytes,11,opt,name=premium_animation,json=premiumAnimation,proto3,oneof" json:"premium_animation,omitempty"`
	MaskPosition     *MaskPosition          `protobuf:"bytes,12,opt,name=mask_position,json=maskPosition,proto3,oneof" json:"mask_position,omitempty"`
	CustomEmojiId    *string                `protobuf:"bytes,13,opt,name=custom_emoji_id,json=customEmojiId,proto3,oneof" json:"custom_emoji_id,omitempty"`
	NeedsRepainting  *bool                  `protobuf:"varint,14,opt,name=needs_repainting,json=needsRepainting,proto3,oneof" json:"needs_repainting,omitempty"`
	FileSize         *int32                 `protobuf:"varint,15,opt,name=file_size,json=fileSize,proto3,oneof" json:"file_size,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Sticker) Reset() {
	*x = Sticker{}
	mi := &file_media_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Sticker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sticker) ProtoMessage() {}

func (x *Sticker) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sticker.ProtoReflect.Descriptor instead.
func (*Sticker) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{5}
}

func (x *Sticker) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

func (x *Sticker) GetFileUniqueId() string {
	if x != nil {
		return x.FileUniqueId
	}
	return ""
}

func (x *Sticker) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Sticker) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *Sticker) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *Sticker) GetIsAnimated() bool {
	if x != nil {
		return x.IsAnimated
	}
	return false
}

func (x *Sticker) GetIsVideo() bool {
	if x != nil {
		return x.IsVideo
	}
	return false
}

func (x *Sticker) GetThumb() *PhotoSize {
	if x != nil {
		return x.Thumb
	}
	return nil
}

func (x *Sticker) GetEmoji() string {
	if x != nil && x.Emoji != nil {
		return *x.Emoji
	}
	return ""
}

func (x *Sticker) GetSetName() string {
	if x != nil && x.SetName != nil {
		return *x.SetName
	}
	return ""
}

func (x *Sticker) GetPremiumAnimation() *File {
	if x != nil {
		return x.PremiumAnimation
	}
	return nil
}

func (x *Sticker) GetMaskPosition() *MaskPosition {
	if x != nil {
		return x.MaskPosition
	}
	return nil
}

func (x *Sticker) GetCustomEmojiId() string {
	if x != nil && x.CustomEmojiId != nil {
		return *x.CustomEmojiId
	}
	return ""
}

func (x *Sticker) GetNeedsRepainting() bool {
	if x != nil && x.NeedsRepainting != nil {
		return *x.NeedsRepainting
	}
	return false
}

func (x *Sticker) GetFileSize() int32 {
	if x != nil && x.FileSize != nil {
		return *x.FileSize
	}
	return 0
}

type Video struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	FileId         string                 `protobuf:"bytes,1,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	FileUniqueId   string                 `protobuf:"bytes,2,opt,name=file_unique_id,json=fileUniqueId,proto3" json:"file_unique_id,omitempty"`
	Width          int32                  `protobuf:"zigzag32,3,opt,name=width,proto3" json:"width,omitempty"`
	Height         int32                  `protobuf:"zigzag32,4,opt,name=height,proto3" json:"height,omitempty"`
	Duration       int32                  `protobuf:"zigzag32,5,opt,name=duration,proto3" json:"duration,omitempty"`
	Thumbnail      *PhotoSize             `protobuf:"bytes,6,opt,name=thumbnail,proto3,oneof" json:"thumbnail,omitempty"`
	Cover          []*PhotoSize           `protobuf:"bytes,7,rep,name=cover,proto3" json:"cover,omitempty"`
	StartTimestamp *int32                 `protobuf:"zigzag32,8,opt,name=start_timestamp,json=startTimestamp,proto3,oneof" json:"start_timestamp,omitempty"`
	FileName       *string                `protobuf:"bytes,9,opt,name=file_name,json=fileName,proto3,oneof" json:"file_name,omitempty"`
	MimeType       *string                `protobuf:"bytes,10,opt,name=mime_type,json=mimeType,proto3,oneof" json:"mime_type,omitempty"`
	FileSize       *int32                 `protobuf:"zigzag32,11,opt,name=file_size,json=fileSize,proto3,oneof" json:"file_size,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Video) Reset() {
	*x = Video{}
	mi := &file_media_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Video) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Video) ProtoMessage() {}

func (x *Video) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Video.ProtoReflect.Descriptor instead.
func (*Video) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{6}
}

func (x *Video) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

func (x *Video) GetFileUniqueId() string {
	if x != nil {
		return x.FileUniqueId
	}
	return ""
}

func (x *Video) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *Video) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *Video) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *Video) GetThumbnail() *PhotoSize {
	if x != nil {
		return x.Thumbnail
	}
	return nil
}

func (x *Video) GetCover() []*PhotoSize {
	if x != nil {
		return x.Cover
	}
	return nil
}

func (x *Video) GetStartTimestamp() int32 {
	if x != nil && x.StartTimestamp != nil {
		return *x.StartTimestamp
	}
	return 0
}

func (x *Video) GetFileName() string {
	if x != nil && x.FileName != nil {
		return *x.FileName
	}
	return ""
}

func (x *Video) GetMimeType() string {
	if x != nil && x.MimeType != nil {
		return *x.MimeType
	}
	return ""
}

func (x *Video) GetFileSize() int32 {
	if x != nil && x.FileSize != nil {
		return *x.FileSize
	}
	return 0
}

type VideoNote struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FileId        string                 `protobuf:"bytes,1,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	FileUniqueId  string                 `protobuf:"bytes,2,opt,name=file_unique_id,json=fileUniqueId,proto3" json:"file_unique_id,omitempty"`
	Length        int32                  `protobuf:"zigzag32,3,opt,name=length,proto3" json:"length,omitempty"`
	Duration      int32                  `protobuf:"zigzag32,4,opt,name=duration,proto3" json:"duration,omitempty"`
	Thumbnail     *PhotoSize             `protobuf:"bytes,5,opt,name=thumbnail,proto3,oneof" json:"thumbnail,omitempty"`
	FileSize      *int32                 `protobuf:"zigzag32,6,opt,name=file_size,json=fileSize,proto3,oneof" json:"file_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VideoNote) Reset() {
	*x = VideoNote{}
	mi := &file_media_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VideoNote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoNote) ProtoMessage() {}

func (x *VideoNote) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoNote.ProtoReflect.Descriptor instead.
func (*VideoNote) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{7}
}

func (x *VideoNote) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

func (x *VideoNote) GetFileUniqueId() string {
	if x != nil {
		return x.FileUniqueId
	}
	return ""
}

func (x *VideoNote) GetLength() int32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *VideoNote) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *VideoNote) GetThumbnail() *PhotoSize {
	if x != nil {
		return x.Thumbnail
	}
	return nil
}

func (x *VideoNote) GetFileSize() int32 {
	if x != nil && x.FileSize != nil {
		return *x.FileSize
	}
	return 0
}

type Voice struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FileId        string                 `protobuf:"bytes,1,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	FileUniqueId  string                 `protobuf:"bytes,2,opt,name=file_unique_id,json=fileUniqueId,proto3" json:"file_unique_id,omitempty"`
	Duration      int32                  `protobuf:"zigzag32,3,opt,name=duration,proto3" json:"duration,omitempty"`
	MimeType      *string                `protobuf:"bytes,4,opt,name=mime_type,json=mimeType,proto3,oneof" json:"mime_type,omitempty"`
	FileSize      *int32                 `protobuf:"zigzag32,5,opt,name=file_size,json=fileSize,proto3,oneof" json:"file_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Voice) Reset() {
	*x = Voice{}
	mi := &file_media_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Voice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Voice) ProtoMessage() {}

func (x *Voice) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Voice.ProtoReflect.Descriptor instead.
func (*Voice) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{8}
}

func (x *Voice) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

func (x *Voice) GetFileUniqueId() string {
	if x != nil {
		return x.FileUniqueId
	}
	return ""
}

func (x *Voice) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *Voice) GetMimeType() string {
	if x != nil && x.MimeType != nil {
		return *x.MimeType
	}
	return ""
}

func (x *Voice) GetFileSize() int32 {
	if x != nil && x.FileSize != nil {
		return *x.FileSize
	}
	return 0
}

var File_media_proto protoreflect.FileDescriptor

var file_media_proto_rawDesc = string([]byte{
	0x0a, 0x0b, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x6d,
	0x61, 0x73, 0x6b, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xe2, 0x02, 0x0a, 0x09, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x17, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x11, 0x52, 0x05,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x11, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x11, 0x52,
	0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x09, 0x74, 0x68, 0x75,
	0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70,
	0x68, 0x6f, 0x74, 0x6f, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x48, 0x00, 0x52, 0x09, 0x74, 0x68, 0x75,
	0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x6d,
	0x69, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02,
	0x52, 0x08, 0x6d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a,
	0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x11,
	0x48, 0x03, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x6d, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x86, 0x03, 0x0a, 0x05, 0x61, 0x75, 0x64, 0x69,
	0x6f, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x11, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x09,
	0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x09, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12,
	0x19, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09,
	0x6d, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x03, 0x52, 0x08, 0x6d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20,
	0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x11, 0x48, 0x04, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x2e, 0x0a, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x48, 0x05, 0x52, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x88, 0x01, 0x01,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6d, 0x69, 0x6d, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c,
	0x22, 0x97, 0x02, 0x0a, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x75,
	0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x66, 0x69, 0x6c, 0x65, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x09,
	0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x48, 0x00, 0x52, 0x09,
	0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20,
	0x0a, 0x09, 0x6d, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x02, 0x52, 0x08, 0x6d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x20, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x11, 0x48, 0x03, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88,
	0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x6d, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x22, 0xa5, 0x01, 0x0a, 0x04, 0x66,
	0x69, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65,
	0x49, 0x64, 0x12, 0x20, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50,
	0x61, 0x74, 0x68, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x22, 0xa9, 0x01, 0x0a, 0x0a, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x11, 0x52,
	0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x11, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x20,
	0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x11, 0x48, 0x00, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x9b,
	0x05, 0x0a, 0x07, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x71,
	0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x6c,
	0x65, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x69,
	0x73, 0x5f, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x69, 0x73, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x69, 0x73, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x69, 0x73, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x26, 0x0a, 0x05, 0x74, 0x68, 0x75, 0x6d, 0x62,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x48, 0x00, 0x52, 0x05, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x88, 0x01, 0x01, 0x12,
	0x19, 0x0a, 0x05, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x05, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x73, 0x65,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x07,
	0x73, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x11, 0x70, 0x72,
	0x65, 0x6d, 0x69, 0x75, 0x6d, 0x5f, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x48, 0x03, 0x52, 0x10,
	0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x0d, 0x6d, 0x61, 0x73, 0x6b, 0x5f, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x61, 0x73,
	0x6b, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x04, 0x52, 0x0c, 0x6d, 0x61,
	0x73, 0x6b, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a,
	0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x5f, 0x69, 0x64,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x6e, 0x65,
	0x65, 0x64, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x61, 0x69, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x06, 0x52, 0x0f, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x52, 0x65, 0x70,
	0x61, 0x69, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x48, 0x07, 0x52,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x6d, 0x6f, 0x6a, 0x69,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x14, 0x0a,
	0x12, 0x5f, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x5f, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x5f, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x5f, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x5f, 0x69, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6e, 0x65,
	0x65, 0x64, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x61, 0x69, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x22, 0xc3, 0x03, 0x0a,
	0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12,
	0x24, 0x0a, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x55, 0x6e, 0x69,
	0x71, 0x75, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x11, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x11, 0x52, 0x06, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2e, 0x0a, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x48,
	0x00, 0x52, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x88, 0x01, 0x01, 0x12,
	0x21, 0x0a, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x52, 0x05, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x12, 0x2c, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x11, 0x48, 0x01, 0x52, 0x0e, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x88, 0x01, 0x01,
	0x12, 0x20, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x6d, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x08, 0x6d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x11, 0x48, 0x04, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x68, 0x75, 0x6d, 0x62,
	0x6e, 0x61, 0x69, 0x6c, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6d, 0x69, 0x6d, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x22, 0xed, 0x01, 0x0a, 0x0a, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x6e, 0x6f, 0x74,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x11,
	0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x48, 0x00, 0x52, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69,
	0x6c, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x11, 0x48, 0x01, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x68, 0x75, 0x6d, 0x62,
	0x6e, 0x61, 0x69, 0x6c, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x22, 0xc2, 0x01, 0x0a, 0x05, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66,
	0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x75, 0x6e,
	0x69, 0x71, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66,
	0x69, 0x6c, 0x65, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x09, 0x6d, 0x69, 0x6d, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x69,
	0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x11, 0x48, 0x01, 0x52, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x6d, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x18, 0x5a, 0x16, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x64, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x2d, 0x61, 0x70,
	0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_media_proto_rawDescOnce sync.Once
	file_media_proto_rawDescData []byte
)

func file_media_proto_rawDescGZIP() []byte {
	file_media_proto_rawDescOnce.Do(func() {
		file_media_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_media_proto_rawDesc), len(file_media_proto_rawDesc)))
	})
	return file_media_proto_rawDescData
}

var file_media_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_media_proto_goTypes = []any{
	(*Animation)(nil),    // 0: animation
	(*Audio)(nil),        // 1: audio
	(*Document)(nil),     // 2: document
	(*File)(nil),         // 3: file
	(*PhotoSize)(nil),    // 4: photo_size
	(*Sticker)(nil),      // 5: sticker
	(*Video)(nil),        // 6: video
	(*VideoNote)(nil),    // 7: video_note
	(*Voice)(nil),        // 8: voice
	(*MaskPosition)(nil), // 9: mask_position
}
var file_media_proto_depIdxs = []int32{
	4, // 0: animation.thumbnail:type_name -> photo_size
	4, // 1: audio.thumbnail:type_name -> photo_size
	4, // 2: document.thumbnail:type_name -> photo_size
	4, // 3: sticker.thumb:type_name -> photo_size
	3, // 4: sticker.premium_animation:type_name -> file
	9, // 5: sticker.mask_position:type_name -> mask_position
	4, // 6: video.thumbnail:type_name -> photo_size
	4, // 7: video.cover:type_name -> photo_size
	4, // 8: video_note.thumbnail:type_name -> photo_size
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_media_proto_init() }
func file_media_proto_init() {
	if File_media_proto != nil {
		return
	}
	file_mask_position_proto_init()
	file_media_proto_msgTypes[0].OneofWrappers = []any{}
	file_media_proto_msgTypes[1].OneofWrappers = []any{}
	file_media_proto_msgTypes[2].OneofWrappers = []any{}
	file_media_proto_msgTypes[3].OneofWrappers = []any{}
	file_media_proto_msgTypes[4].OneofWrappers = []any{}
	file_media_proto_msgTypes[5].OneofWrappers = []any{}
	file_media_proto_msgTypes[6].OneofWrappers = []any{}
	file_media_proto_msgTypes[7].OneofWrappers = []any{}
	file_media_proto_msgTypes[8].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_media_proto_rawDesc), len(file_media_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_media_proto_goTypes,
		DependencyIndexes: file_media_proto_depIdxs,
		MessageInfos:      file_media_proto_msgTypes,
	}.Build()
	File_media_proto = out.File
	file_media_proto_goTypes = nil
	file_media_proto_depIdxs = nil
}
